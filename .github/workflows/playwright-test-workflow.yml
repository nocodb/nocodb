name: Playwright test reusable workflow

on:
  workflow_call:
    inputs:
      shard:
        description: 'Shard number'
        required: true
        type: string
      db:
        required: true
        type: string

jobs:
  playwright:
    runs-on: [self-hosted, aws]
    timeout-minutes: 100
    steps:
      # Reference: https://github.com/pierotofy/set-swap-space/blob/master/action.yml
      # - name: Set 5gb swap
      #   shell: bash
      #   # Delete the swap file, allocate a new one, and activate it
      #   run: |
      #       export SWAP_FILE=$(swapon --show=NAME | tail -n 1)
      #       sudo swapoff $SWAP_FILE
      #       sudo rm $SWAP_FILE
      #       sudo fallocate -l 5G $SWAP_FILE
      #       sudo chmod 600 $SWAP_FILE
      #       sudo mkswap $SWAP_FILE
      #       sudo swapon $SWAP_FILE
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.15.0
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache node modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules

        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-hetzner-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-hetzner-build-${{ env.cache-name }}-
            ${{ runner.os }}-hetzner-build-
            ${{ runner.os }}-hetzner
      - name: setup pg
        working-directory: ./
        run:  cd /var/lib/postgresql/ && sudo -u postgres psql -c "SELECT 'dropdb '||datname||'' FROM pg_database WHERE datistemplate = false AND datallowconn = true And datname NOT IN ('postgres')" |grep ' dropdb ' |  sudo -u postgres /bin/bash ; cd
      - name: Set CI env
        run: export CI=true
      - name: Set Node env
        run: export NODE_OPTIONS=\"--max_old_space_size=16384\";
      - name: install dependencies nocodb-sdk
        working-directory: ./packages/nocodb-sdk
        run: npm install
      - name: Build nocodb-sdk
        working-directory: ./packages/nocodb-sdk
        run: npm run build:ee
      - name: Setup mysql
        if: ${{ inputs.db == 'mysql' }}
        working-directory: ./
        run: docker-compose -f ./tests/playwright/scripts/docker-compose-mysql-playwright.yml up -d &
      # - name: Setup pg
      #   if: ${{ inputs.db == 'pg' }}
      #   working-directory: ./
      #   run: docker-compose -f ./tests/playwright/scripts/docker-compose-playwright-pg.yml up -d &
      - name: Setup pg for quick tests
        if: ${{ inputs.db == 'sqlite' && inputs.shard == '1' }}
        working-directory: ./
        run: docker-compose -f ./tests/playwright/scripts/docker-compose-pg-pw-quick.yml up -d &
      - name: run frontend
        working-directory: ./packages/nc-gui
        run: npm run ci:run
        timeout-minutes: 20
      - name: Run backend
        if: ${{ inputs.db == 'sqlite' }}
        working-directory: ./packages/nocodb
        run: |
          npm install
          npm run watch:run:playwright &> ${{ inputs.db }}_${{ inputs.shard }}_test_backend.log &
      - name: Run backend:mysql
        if: ${{ inputs.db == 'mysql' }}
        working-directory: ./packages/nocodb
        run: |
          npm install
          npm run watch:run:playwright:mysql &> ${{ inputs.db }}_${{ inputs.shard }}_test_backend.log &
      - name: Run backend:pg
        if: ${{ inputs.db == 'pg' }}
        working-directory: ./packages/nocodb
        run: |
          npm install
          npm run watch:run:playwright:pg:ee &> ${{ inputs.db }}_${{ inputs.shard }}_test_backend.log &
      - name: Cache playwright npm modules
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: |
            **/tests/playwright/node_modules
          key: cache-hetzner-nc-playwright-${{ hashFiles('**/tests/playwright/package-lock.json') }}
          restore-keys: |
            cache-hetzner-nc-playwright-
      - name: Install dependencies
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: ./tests/playwright
        run: npm install
      - name: Install Playwright Browsers
        working-directory: ./tests/playwright
        run: npx playwright install chromium --with-deps
      - name: Wait for backend
        run: |
          while ! curl --output /dev/null --silent --head --fail http://localhost:8080; do
            printf '.'
            sleep 2
          done
        timeout-minutes: 2
      - name: Run Playwright Tests
        working-directory: ./tests/playwright
        run: E2E_DB_TYPE=${{ inputs.db }} npm run ci:test:shard:${{ inputs.shard }}
        timeout-minutes: 60
      # Stress test added/modified tests
      - name: Fetch develop branch
        working-directory: ./tests/playwright
        run: git fetch origin develop
      - name: Stress test
        working-directory: ./tests/playwright
        run: E2E_DB_TYPE=${{ inputs.db }} node ./scripts/stressTestNewlyAddedTest.js

      # Quick tests (pg on sqlite shard 0 and sqlite on sqlite shard 1)
      - name: Run quick server and tests (pg)
        if: ${{ inputs.db == 'sqlite' && inputs.shard == '1' }}
        working-directory: ./packages/nocodb
        run: |
          kill -9 $(lsof -t -i:8080)
          npm run watch:run:playwright:pg:cyquick &
      - name: Run quick server and tests (sqlite)
        if: ${{ inputs.db == 'sqlite' && inputs.shard == '2' }}
        working-directory: ./packages/nocodb
        run: |
          kill -9 $(lsof -t -i:8080)
          npm run watch:run:playwright:quick > quick_${{ inputs.shard }}_test_backend.log &
      - name: Wait for backend & run quick tests
        if: ${{ inputs.db == 'sqlite' }}
        working-directory: ./tests/playwright
        run: |
          while ! curl --output /dev/null --silent --head --fail http://localhost:8080; do
            printf '.'
            sleep 2
          done
          PLAYWRIGHT_HTML_REPORT=playwright-report-quick npm run test:quick
      - name: Copy Artifacts to Local Artifacts Dir
        if: always()
        working-directory: ./
        run: |
          # expects the variables to be available in runner context.
          path="gh-artifacts/runs/${GITHUB_RUN_ID}/run-attempt/${GITHUB_RUN_ATTEMPT}/job_name/"${GITHUB_JOB}"-${{ inputs.shard }}/${RANDOM}-$(date +%s)"
          target_dir="/mnt/${path}"
          mkdir -p ${target_dir}
          mkdir -p ${target_dir}/playwright-report

          # start : add any artifacts to be copied here
          cp -r ./tests/playwright/playwright-report ${target_dir}/  || echo "playwright reports directory does not exists" >>  ${target_dir}/playwright-report/index.html
          cp ./packages/nocodb/${{ inputs.db }}_${{ inputs.shard }}_test_backend.log ${target_dir}/ || echo "backend logs file does not exists" >> ${target_dir}/index.html
          # end: artifacts copy

          SUMMARY='[Artifacts](http://65.21.27.147/'${path}')
          [playwright-report](http://65.21.27.147/'${path}'/playwright-report)'
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY     
#      - uses: actions/upload-artifact@v3
#        if: ${{ inputs.db == 'sqlite' }}
#        with:
#          name: quick-backend-log-${{ inputs.shard }}
#          path: ./packages/nocodb/quick_${{ inputs.shard }}_test_backend.log
#          retention-days: 2
#      - uses: actions/upload-artifact@v3
#        if: ${{ inputs.db == 'sqlite' }}
#        with:
#          name: playwright-report-quick-${{ inputs.shard }}
#          path: ./tests/playwright/playwright-report-quick/
#          retention-days: 2
#
#      - uses: actions/upload-artifact@v3
#        if: always()
#        with:
#          name: playwright-report-${{ inputs.db }}-${{ inputs.shard }}
#          path: ./tests/playwright/playwright-report/
#          retention-days: 2
#      - uses: actions/upload-artifact@v3
#        if: always()
#        with:
#          name: playwright-report-stress-${{ inputs.db }}-${{ inputs.shard }}
#          path: ./tests/playwright/playwright-report-stress/
#          retention-days: 2
#      - uses: actions/upload-artifact@v3
#        if: always()
#        with:
#          name: backend-logs-${{ inputs.db }}-${{ inputs.shard }}
#          path: ./packages/nocodb/${{ inputs.db }}_${{ inputs.shard }}_test_backend.log
#          retention-days: 2
