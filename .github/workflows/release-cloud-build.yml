name: "Build cloud docker image"

on:
  # Triggered manually
  workflow_dispatch:
    inputs:
      staging:
        description: 'Staging (ws-pre-release)'
        required: false
        default: 'false'
      tag:
        description: "Any additional Tag"
        required: false


jobs:
  cloud-docker-build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./packages/nocodb
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-2
    steps:
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.15.0
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set outputs
        id: vars
        run: echo "release_version=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: build nocodb-sdk
        run: |
          # build nocodb-sdk

          cd packages/nocodb-sdk &&
          npm ci && npm run build
      - name: build nc-gui and copy to nocodb
        env:
          NC_CDN_URL: "${{ secrets.CDN_URL }}/${{ steps.vars.outputs.release_version }}"
        run: |
          export NODE_OPTIONS="--max_old_space_size=16384"
          # generate static build of nc-gui
          cd packages/nc-gui &&
          npm ci &&
          npm run generate &&

          # copy build to nocodb
          rsync -rvzh ./dist/ ../nocodb/docker/nc-gui/


      - name: build nocodb
        run: |
          # build nocodb ( pack nocodb-sdk and nc-gui )
          cd packages/nocodb && npm install &&
          EE=true ./node_modules/.bin/webpack --config webpack.cloud.config.js &&
          # remove nocodb-sdk since it's packed with the build
          npm uninstall --save nocodb-sdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Move files to release version folder
        run: |
          mkdir -p packages/nc-gui/build/${{ steps.vars.outputs.release_version }}
          mv packages/nc-gui/dist/* packages/nc-gui/build/${{ steps.vars.outputs.release_version }}
          echo "User: ${{ github.actor }}" >> packages/nc-gui/build/${{ steps.vars.outputs.release_version }}/nc.txt
          echo "Commit: ${{ github.sha }}" >> packages/nc-gui/build/${{ steps.vars.outputs.release_version }}/nc.txt
          echo "Branch: ${{ github.ref }}" >> packages/nc-gui/build/${{ steps.vars.outputs.release_version }}/nc.txt

      - name: Deploy
        uses: pranavxc/s3-deploy@2cdf96df65b6c97ee09a5771958582b77f22b738
        with:
          folder: packages/nc-gui/build/
          bucket: ${{ secrets.CDN_BUCKET }}
          dist-id: ${{ secrets.CDN_DIST_ID }}
          invalidation: /${{ steps.vars.outputs.release_version }}/*

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nocohub
          IMAGE_TAG: ${{ github.event.inputs.tag }}
          CUSTOM_IMAGE_TAG_ARG: ${{ github.event.inputs.tag && format('-t {0}/nocohub:{1}', steps.login-ecr.outputs.registry, github.event.inputs.tag) || '' }}
          STAGING_IMAGE_TAG_ARG: ${{ github.event.inputs.staging == 'true' && format('-t {0}/nocohub:ws-pre-release', steps.login-ecr.outputs.registry) || '' }}
          COMMIT_HASH: ${{ github.sha }}
        run: |
          cd packages/nocodb &&
          docker build -f Dockerfile-cloud $CUSTOM_IMAGE_TAG_ARG $STAGING_IMAGE_TAG_ARG  -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_HASH .
          [[ ! -z "$IMAGE_TAG" ]] && docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_HASH
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Push staging image to ECR
        if: ${{ github.event.inputs.staging == 'true' }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nocohub
        run: |
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:ws-pre-release
      - name: Publish to staging
        if: ${{ github.event.inputs.staging == 'true' }}
        run: |
          sh ./scripts/release/staging.sh

  microservice-cloud-docker-build:
    runs-on: ubuntu-latest
    env:
      working-directory: ./packages/nocodb-ingest-service
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-2
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set outputs
        id: vars
        run: echo "release_version=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: nocohub-ingest-service
          IMAGE_TAG: ${{ github.event.inputs.tag }}
          CUSTOM_IMAGE_TAG_ARG: ${{ github.event.inputs.tag && format('-t {0}/nocohub-ingest-service:{1}', steps.login-ecr.outputs.registry, github.event.inputs.tag) || '' }}
          COMMIT_HASH: ${{ github.sha }}
        run: |
          cd packages/nocodb-ingest-service &&
          docker build -f Dockerfile $CUSTOM_IMAGE_TAG_ARG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -t $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_HASH .
          [[ ! -z "$IMAGE_TAG" ]] && docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_HASH
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
