name: "Enterprise : Docker build on-premise"

on:
  # Triggered manually
  workflow_dispatch:
    inputs:
      tag:
        description: "Docker image tag"
        required: true
jobs:
  buildx:
    runs-on: [ self-hosted, docker-build ]
    env:
      working-directory: ./packages/nocodb
    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: 18.19.1
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Get Docker Repository
        id: get-docker-repository
        run: |
          DOCKER_REPOSITORY=nocodb
          DOCKER_BUILD_TAG=${{ github.event.inputs.tag || inputs.tag }}
          DOCKER_BUILD_LATEST_TAG=latest
          echo "DOCKER_REPOSITORY=${DOCKER_REPOSITORY}" >> $GITHUB_OUTPUT
          echo "DOCKER_BUILD_TAG=${DOCKER_BUILD_TAG}" >> $GITHUB_OUTPUT
          echo "DOCKER_BUILD_LATEST_TAG=${DOCKER_BUILD_LATEST_TAG}" >> $GITHUB_OUTPUT
          echo DOCKER_REPOSITORY: ${DOCKER_REPOSITORY}
          echo DOCKER_BUILD_TAG: ${DOCKER_BUILD_TAG}
          echo DOCKER_BUILD_LATEST_TAG: ${DOCKER_BUILD_LATEST_TAG}

      - name: remove use-node-version line from .npmrc
        run: sed -i '/^use-node-version/d' .npmrc
      - name: install dependencies
        run: pnpm bootstrap
      - name: Set outputs
        id: vars
        run: echo "release_version=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      - name: Create nc.txt version identifier file
        run: |
          mkdir -p packages/nc-gui/build/${{ steps.vars.outputs.release_version }}
          echo "User: ${{ github.actor }}" >> packages/nc-gui/build/${{ steps.vars.outputs.release_version }}/nc.txt
          echo "Commit: ${{ github.sha }}" >> packages/nc-gui/build/${{ steps.vars.outputs.release_version }}/nc.txt
          echo "Branch: ${{ github.ref }}" >> packages/nc-gui/build/${{ steps.vars.outputs.release_version }}/nc.txt
          echo "Action ID: ${{ github.run_id }}" >> packages/nc-gui/build/${{ steps.vars.outputs.release_version }}/nc.txt
          date >> packages/nc-gui/build/${{ steps.vars.outputs.release_version }}/nc.txt
          cp packages/nc-gui/build/${{ steps.vars.outputs.release_version }}/nc.txt ./packages/nocodb/src/public/
          cp packages/nc-gui/build/${{ steps.vars.outputs.release_version }}/nc.txt ./packages/nc-sql-executor/src/public/nc.txt

      ### main build and deploy starts here ###
      - name: build nc-gui and copy to nocodb
        env:
          NC_ON_PREM: true
#          NC_CDN_URL: "${{ secrets.CDN_URL }}/${{ steps.vars.outputs.release_version }}"
#          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          export NODE_OPTIONS="--max_old_space_size=16384"
          # generate static build of nc-gui
          cd packages/nc-gui &&
          pnpm run generate:ee &&

          # delete sourcemaps
          find ./ee/dist/ -type f -name '*.js.map' -delete &&
          find ./ee/dist/ -type f -name '*.css.map' -delete &&

          # # delete sourcemaps refs - enable if needed
          # find ./ee/dist/ -type f -name '*.js' -exec sed -i -E 's/sourceMappingURL=[^ ]*\.js\.map//g' {} +
          # find ./ee/dist/ -type f -name '*.css' -exec sed -i -E 's/sourceMappingURL=[^ ]*\.css\.map//g' {} +

          # copy build to nocodb
          rsync -rvzh ./ee/dist/ ../nocodb/docker/nc-gui/

      - name: build nocodb
        run: |
          # build nocodb ( pack nocodb-sdk and nc-gui )
          cd packages/nocodb &&
          EE=true pnpm exec webpack --config webpack.ee-on-prem.config.js &&
          # remove bundled libraries (nocodb-sdk, knex-snowflake)
          pnpm uninstall --save-prod nocodb-sdk knex-snowflake
#
#      - name: Move files to release version folder
#        run: |
#          mkdir -p packages/nc-gui/build/${{ steps.vars.outputs.release_version }}
#          mv packages/nc-gui/ee/dist/* packages/nc-gui/build/${{ steps.vars.outputs.release_version }}

#      - name: Deploy UI assets to CDN
#        uses: pranavxc/s3-deploy@2cdf96df65b6c97ee09a5771958582b77f22b738
#        with:
#          folder: packages/nc-gui/build/
#          bucket: ${{ secrets.CDN_BUCKET }}
#          dist-id: ${{ secrets.CDN_DIST_ID }}
#          invalidation: /${{ steps.vars.outputs.release_version }}/*



      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.2.1


      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v3.2.0
        with:
          file: "./packages/nocodb/src/ee-on-prem/Dockerfile-on-prem"
          context: "./packages/nocodb"
          build-args: NC_VERSION=${{ steps.get-docker-repository.outputs.DOCKER_BUILD_TAG }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          push: true
          tags: |
            nocodb/nocodb-ee:${{ steps.get-docker-repository.outputs.DOCKER_BUILD_TAG }}
            nocodb/nocodb-ee:latest

        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
