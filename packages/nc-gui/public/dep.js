!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.libs=t():e.libs=t()}("undefined"!=typeof self?self:this,(()=>(()=>{"use strict";var e,t,s={302:e=>{e.exports=require("xlsx")}},i={};function n(e){var t=i[e];if(void 0!==t)return t.exports;var o=i[e]={exports:{}};return s[e](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,n.t=function(s,i){if(1&i&&(s=this(s)),8&i)return s;if("object"==typeof s&&s){if(4&i&&s.__esModule)return s;if(16&i&&"function"==typeof s.then)return s}var o=Object.create(null);n.r(o);var a={};e=e||[null,t({}),t([]),t(t)];for(var l=2&i&&s;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>a[e]=()=>s[e]));return a.default=()=>s,n.d(o,a),o},n.d=(e,t)=>{for(var s in t)n.o(t,s)&&!n.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};return(()=>{n.r(o),n.d(o,{CSVTemplateAdapter:()=>f,ExcelTemplateAdapter:()=>y,ExcelUrlTemplateAdapter:()=>b,JSONTemplateAdapter:()=>d,JSONUrlTemplateAdapter:()=>h});const e=require("nocodb-sdk"),t=require("validator/lib/isURL");var s=n.n(t);const i=[{checked:!0,unchecked:!1},{x:!0,"":!1},{yes:!0,no:!1},{y:!0,n:!1},{1:!0,0:!1},{"[x]":!0,"[]":!1,"[ ]":!1},{"☑":!0,"":!1},{"✅":!0,"":!1},{"✓":!0,"":!1},{"✔":!0,"":!1},{enabled:!0,disabled:!1},{on:!0,off:!1},{done:!0,"":!1},{true:!0,false:!1}],a=i.reduce(((e,t)=>({...e,...t})),{}),l=(e,t)=>e&&void 0!==t?e[t]:e,r=e=>e&&a[e],c=(t,n)=>{const o={uidt:n};if(o.uidt===e.UITypes.SingleLineText)if(t.some((e=>(l(e,a)||"").toString().match(/[\r\n]/)||(l(e,a)||"").toString().length>255))&&(o.uidt=e.UITypes.LongText),((e,t)=>e.some((e=>{const s=l(e,t);return s&&(e=>/^(([^<>()[\].,;:\s@"]+(\.[^<>()[\].,;:\s@"]+)*)|(".+"))@(([^<>()[\].,;:\s@"]+\.)+[^<>()[\].,;:\s@"]{2,})$/i.test(e))(s)})))(t)&&(o.uidt=e.UITypes.Email),((e,t)=>e.some((e=>{const i=l(e,t);return i&&s()(i)})))(t))o.uidt=e.UITypes.URL;else{const s=((e,t)=>{let s=i;for(let i=0;i<e.length;i++){const n=l(e[i],t);if(null!=n&&""!==n.toString().trim()&&(s=s.filter((e=>n in e)),!s.length))return!1}return s})(t);1===s.length?o.uidt=e.UITypes.Checkbox:Object.assign(o,(t=>{const s={};if(!t.some((e=>e&&(e||"").toString().includes(",")))){const i=[...new Set(t.filter((e=>null!=e)).map((e=>e.toString().trim())))];return i.length>64?(s.uidt=e.UITypes.SingleLineText,s._disableSelect=!0):(t.length>i.length&&i.length<=Math.ceil(t.length/2)&&(s.uidt=e.UITypes.SingleSelect),s.dtxp=`${i.map((e=>`'${e.replace(/'/gi,"''")}'`)).join(",")}`),s}{const i=t.flatMap((e=>e?e.toString().trim().split(/\s*,\s*/):[])),n=[...new Set(i.filter((e=>null!=e)).map((e=>e.toString().trim())))];n.length>64?(s.uidt=e.UITypes.SingleLineText,s._disableSelect=!0):(i.length>n.length&&n.length<=Math.ceil(i.length/2)&&(s.uidt=e.UITypes.MultiSelect),s.dtxp=`${n.map((e=>`'${e.replace(/'/gi,"''")}'`)).join(",")}`)}})(t))}else o.uidt===e.UITypes.Number&&(e=>e.some((e=>e&&parseInt(e)!==+e)))(t)&&(o.uidt=e.UITypes.Decimal);var a;return o};class u{progressCallback;constructor(e){this.progressCallback=e}progress(e){this.progressCallback?.(e)}init(){}parse(){throw new Error("'parse' method is not implemented")}parseData(){throw new Error("'parseData' method is not implemented")}parseTemplate(){throw new Error("'parseTemplate' method is not implemented")}getColumns(){throw new Error("'getColumns' method is not implemented")}getTemplate(){throw new Error("'getTemplate' method is not implemented")}getData(){throw new Error("'getData' method is not implemented")}}const p={number:e.UITypes.Number,string:e.UITypes.SingleLineText,date:e.UITypes.DateTime,boolean:e.UITypes.Checkbox,object:e.UITypes.JSON},m=(e,t)=>t.reduce(((e,t)=>e&&e[t]),e);class d extends u{config;data;_jsonData;jsonData;project;columns;constructor(e,t={},s){super(s),this.config=t,this._jsonData=e,this.project={tables:[]},this.jsonData=[],this.data=[],this.columns={}}async init(){this.progress("Initializing json parser");const e="string"==typeof this._jsonData?JSON.parse(this._jsonData):JSON.parse((new TextDecoder).decode(this._jsonData));this.jsonData=Array.isArray(e)?e:[e]}getColumns(){return this.columns}getData(){return this.data}parse(){this.progress("Parsing json data");const e=this.jsonData,t="table",s={table_name:t,ref_table_name:t,columns:[]};this.data[t]=[];for(const t of Object.keys(e[0])){const i=this._parseColumn([t],e);s.columns.push(...i)}this.config.shouldImportData&&this._parseTableData(s),this.project.tables.push(s)}getTemplate(){return this.project}_parseColumn(t=[],s=this.jsonData,i=t.reduce(((e,t)=>e&&e[t]),this.jsonData[0])){const n=[];if(i&&"object"==typeof i&&!Array.isArray(i)&&this.config.normalizeNested)for(const e of Object.keys(i)){const s=this._parseColumn([...t,e],this.jsonData,i[e]);n.push(...s)}else{const o=t.join("_").replace(/\W/g,"_").trim(),a={column_name:o,ref_column_name:o,uidt:e.UITypes.SingleLineText,path:t};if(this.config.autoSelectFieldTypes){a.uidt=p[typeof i]||e.UITypes.SingleLineText;const n=s.map((e=>m(e,t)));Object.assign(a,c(n,a.uidt))}n.push(a)}return n}_parseTableData(t){for(const s of this.jsonData){const i={};for(let n=0;n<t.columns.length;n++){const o=m(s,t.columns[n].path||[]);t.columns[n].uidt===e.UITypes.Checkbox?i[t.columns[n].ref_column_name]=r(o):t.columns[n].uidt===e.UITypes.SingleSelect||t.columns[n].uidt===e.UITypes.MultiSelect?i[t.columns[n].ref_column_name]=(o||"").toString().trim()||null:t.columns[n].uidt===e.UITypes.JSON?i[t.columns[n].ref_column_name]=JSON.stringify(o):i[t.columns[n].column_name]=o}this.data[t.ref_table_name].push(i)}}}class h extends d{url;$api;constructor(e,t,s){super({},t,s),this.url=e}async init(){this.progress("Downloading json file");const e=await this.$api.utils.axiosRequestMake({apiMeta:{url:this.url}});this._jsonData=e,await super.init()}}const g=require("papaparse");class f{config;source;detectedColumnTypes;distinctValues;headers;tables;project;data={};columnValues;progressCallback;constructor(e,t={},s){this.config=t,this.source=e,this.project={tables:[]},this.detectedColumnTypes={},this.distinctValues={},this.headers={},this.columnValues={},this.tables={},this.progressCallback=s}async init(){}initTemplate(t,s,i){const n=+i.every((e=>null===e||"string"==typeof e)),o={id:0},a={table_name:s,ref_table_name:s,columns:[]};this.headers[t]=[],this.tables[t]=[];for(const[s,l]of i.entries()){let i=(n&&l.toString().trim()||`field_${s+1}`).replace(/[` ~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/g,"_").trim();for(;i in o;)i=`${i}${++o[i]}`;o[i]=0,this.detectedColumnTypes[s]={},this.distinctValues[s]=new Set,this.columnValues[s]=[],a.columns.push({column_name:i,ref_column_name:i,meta:{},uidt:e.UITypes.SingleLineText,key:s}),this.headers[t].push(i),this.tables[t]=a}}detectInitialUidt(t){return isNaN(Number(t))||isNaN(parseFloat(t))?validateDateWithUnknownFormat(t)?e.UITypes.DateTime:["true","True","false","False","1","0","T","F","Y","N"].includes(t)?e.UITypes.Checkbox:e.UITypes.SingleLineText:e.UITypes.Number}detectColumnType(t,s){for(let t=0;t<s.length;t++){if(!s[t])continue;const i=[s[t]],n={uidt:this.detectInitialUidt(s[t])};if(isMultiLineTextType(i))n.uidt=e.UITypes.LongText;else if(n.uidt===e.UITypes.SingleLineText)if(isEmailType(i)&&(n.uidt=e.UITypes.Email),isUrlType(i))n.uidt=e.UITypes.URL;else{1===isCheckboxType(i).length?n.uidt=e.UITypes.Checkbox:s[t]&&t<this.config.maxRowsToParse&&(this.columnValues[t].push(s[t]),n.uidt=e.UITypes.SingleSelect)}else n.uidt===e.UITypes.Number?isDecimalType(i)&&(n.uidt=e.UITypes.Decimal):n.uidt===e.UITypes.DateTime&&s[t]&&t<this.config.maxRowsToParse&&this.columnValues[t].push(s[t]);n.uidt in this.detectedColumnTypes[t]||(this.detectedColumnTypes[t]={...this.detectedColumnTypes[t],[n.uidt]:0}),this.detectedColumnTypes[t][n.uidt]+=1,s[t]&&this.distinctValues[t].add(s[t])}}getPossibleUidt(t){const s=this.detectedColumnTypes[t],i=Object.keys(s).length;return 0===i?e.UITypes.SingleLineText:2===i&&e.UITypes.Number in s&&e.UITypes.Decimal in s?e.UITypes.Decimal:i>1?e.UITypes.LongText in s?e.UITypes.LongText:e.UITypes.SingleLineText:Object.keys(s)[0]}updateTemplate(t){for(let s=0;s<this.headers[t].length;s++){const i=this.getPossibleUidt(s);if(this.columnValues[s].length>0){if(i===e.UITypes.DateTime){const n={};if(this.columnValues[s].slice(1,this.config.maxRowsToParse).every((e=>{const t=1===e.split(" ").length;return t&&(n[getDateFormat(e)]=(n[getDateFormat(e)]||0)+1),t}))){this.tables[t].columns[s].uidt=e.UITypes.Date;const i=Object.keys(n);this.tables[t].columns[s].meta.date_format=i.length?i.reduce(((e,t)=>n[e]>n[t]?e:t)):"YYYY/MM/DD"}else this.tables[t].columns[s].uidt=i}else i===e.UITypes.SingleSelect||i===e.UITypes.MultiSelect?(this.tables[t].columns[s].uidt=e.UITypes.SingleLineText,Object.assign(this.tables[t].columns[s],extractMultiOrSingleSelectProps(this.columnValues[s]))):this.tables[t].columns[s].uidt=i;delete this.columnValues[s]}else this.tables[t].columns[s].uidt=i}}async _parseTableData(t,s,i){return new Promise(((n,o)=>{const a=this;let l=0;if(a.config.shouldImportData){a.progress(`Processing ${i} data`),l=0;const r=this.config.importFromURL?s:s.originFileObj;(0,g.parse)(r,{download:a.config.importFromURL,skipEmptyLines:"greedy",step(s){if(l+=1,s&&l>=+a.config.firstRowAsHeaders+1){const n={};for(let i=0;i<a.headers[t].length;i++){const o=a.tables[t].columns[i],l=""===s.data[i]?null:s.data[i];o.uidt===e.UITypes.Checkbox?(n[o.column_name]=getCheckboxValue(l),n[o.column_name]=l):o.uidt===e.UITypes.SingleSelect||o.uidt===e.UITypes.MultiSelect?n[o.column_name]=(l||"").toString().trim()||null:n[o.column_name]=l}a.data[i].push(n)}l%1e3==0&&a.progress(`Processed ${l} rows of ${i}`)},complete(){a.progress(`Processed ${i} data`),n(!0)},error(e){o(e)}})}else n(!0)}))}async _parseTableMeta(e,t){return new Promise(((s,i)=>{const n=this;let o=0;const a=(this.config.importFromURL?t.split("/").pop():t.name).replace(/[` ~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/g,"_").trim();this.data[a]=[];const l=this.config.importFromURL?t:t.originFileObj;(0,g.parse)(l,{download:n.config.importFromURL,skipEmptyLines:"greedy",step(t){o+=1,t&&(1===o?n.config.firstRowAsHeaders?n.initTemplate(e,a,t.data):(n.initTemplate(e,a,[...Array(t.data.length)].map(((e,t)=>`field_${t+1}`))),n.config.autoSelectFieldTypes&&n.detectColumnType(e,t.data)):n.config.autoSelectFieldTypes&&n.detectColumnType(e,t.data))},async complete(){n.updateTemplate(e),n.project.tables.push(n.tables[e]),n.progress(`Processed ${a} metadata`),await n._parseTableData(e,t,a),s(!0)},error(e){i(e)}})}))}async parse(){this.config.importFromURL?await this._parseTableMeta(0,this.source):await Promise.all(this.source.map(((e,t)=>(async(e,t)=>{this.progress(`Parsing ${e.name}`),await this._parseTableMeta(t,e)})(e,t))))}getColumns(){return this.project.tables.map((e=>e.columns))}getData(){return this.data}getTemplate(){return this.project}progress(e){this.progressCallback?.(e)}}const T={d:e.UITypes.DateTime,b:e.UITypes.Checkbox,n:e.UITypes.Number,s:e.UITypes.SingleLineText};class y extends u{config;excelData;project;data={};wb;xlsx;constructor(e={},t={},s){super(s),this.config=t,this.excelData=e,this.project={tables:[]},this.xlsx={}}async init(){this.progress("Initializing excel parser"),this.xlsx=await Promise.resolve().then(n.t.bind(n,302,23));this.wb=this.xlsx.read(new Uint8Array(this.excelData),{type:"array",cellText:!0,cellDates:!0})}async parse(){this.progress("Parsing excel data");const t={};await Promise.all(this.wb.SheetNames.map((s=>(async i=>{this.progress(`Parsing sheet ${s}`),await new Promise((s=>{const n={id:0};let o=(i||"table").replace(/[` ~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/g,"_").trim();for(;o in t;)o=`${o}${++t[o]}`;t[o]=0;const a={table_name:o,ref_table_name:o,columns:[]},l=this.wb.Sheets[i];if(!l||!l["!ref"])return s(!0);const r=this.xlsx.utils.decode_range(l["!ref"]);let c=this.xlsx.utils.sheet_to_json(l,{header:1,blankrows:!1,defval:null});const u=new Date(1899,11,30,0,0,0),p=u.getTime()+6e4*((new Date).getTimezoneOffset()-u.getTimezoneOffset()),m=e=>{const t=this.xlsx.SSF.parse_date_code((e.getTime()-p)/864e5,{date1904:this.wb.Workbook.WBProps.date1904});return new Date(t.y,t.m,t.d,t.H,t.M,t.S)};c=c.map((e=>e.map((e=>e instanceof Date?m(e):e))));for(let t=0;t<c[0].length;t++){let s=(this.config.firstRowAsHeaders&&c[0]&&c[0][t]&&c[0][t].toString().trim()||`field_${t+1}`).replace(/[` ~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/g,"_").trim();for(;s in n;)s=`${s}${++n[s]}`;n[s]=0;const i={column_name:s,ref_column_name:s,meta:{},uidt:e.UITypes.SingleLineText};if(this.config.autoSelectFieldTypes){const s=this.xlsx.utils.encode_cell({c:r.s.c+t,r:+this.config.firstRowAsHeaders}),n=l[s]||{};if(i.uidt=T[n.t]||e.UITypes.SingleLineText,i.uidt===e.UITypes.SingleLineText)if(isMultiLineTextType(c,t)&&(i.uidt=e.UITypes.LongText),isEmailType(c,t)&&(i.uidt=e.UITypes.Email),isUrlType(c,t))i.uidt=e.UITypes.URL;else{const s=c.slice(+this.config.firstRowAsHeaders).map((e=>e[t])).filter((e=>null!=e&&""!==e.toString().trim()));1===isCheckboxType(s,t).length?i.uidt=e.UITypes.Checkbox:Object.assign(i,extractMultiOrSingleSelectProps(s))}else if(i.uidt===e.UITypes.Number)c.slice(1,this.config.maxRowsToParse).some((e=>e&&e[t]&&parseInt(e[t])!==+e[t]))&&(i.uidt=e.UITypes.Decimal),c.slice(1,this.config.maxRowsToParse).every(((e,s)=>{const i=this.xlsx.utils.encode_cell({c:r.s.c+t,r:s+ +this.config.firstRowAsHeaders}),n=l[i];return!n||n.w&&n.w.startsWith("$")}))&&(i.uidt=e.UITypes.Currency),c.slice(1,this.config.maxRowsToParse).some(((e,s)=>{const i=this.xlsx.utils.encode_cell({c:r.s.c+t,r:s+ +this.config.firstRowAsHeaders}),n=l[i];return!n||n.w&&!(!isNaN(Number(n.w))&&!isNaN(parseFloat(n.w)))}))&&(i.uidt=e.UITypes.SingleLineText);else if(i.uidt===e.UITypes.DateTime){const s={};c.slice(1,this.config.maxRowsToParse).every(((e,i)=>{const n=this.xlsx.utils.encode_cell({c:r.s.c+t,r:i+ +this.config.firstRowAsHeaders}),o=l[n],a=!o||o.w&&1===o.w.split(" ").length;return a&&o&&(s[getDateFormat(o.w)]=(s[getDateFormat(o.w)]||0)+1),a}))&&(i.uidt=e.UITypes.Date,i.meta.date_format=Object.keys(s).reduce(((e,t)=>s[e]>s[t]?e:t))||"YYYY/MM/DD")}}a.columns.push(i)}if(this.project.tables.push(a),this.data[o]=[],this.config.shouldImportData){this.progress(`Importing data for ${o}`);let t=0;for(const s of c.slice(1)){const i={};for(let n=0;n<a.columns.length;n++)if(this.config.autoSelectFieldTypes)if(a.columns[n].uidt===e.UITypes.Checkbox)i[a.columns[n].column_name]=getCheckboxValue(s[n]);else if(a.columns[n].uidt===e.UITypes.Currency){const e=this.xlsx.utils.encode_cell({c:r.s.c+n,r:t+ +this.config.firstRowAsHeaders}),o=l[e];i[a.columns[n].column_name]=o&&o.w&&o.w.replace(/[^\d.]+/g,"")||s[n]}else if(a.columns[n].uidt===e.UITypes.SingleSelect||a.columns[n].uidt===e.UITypes.MultiSelect)i[a.columns[n].column_name]=(s[n]||"").toString().trim()||null;else if(a.columns[n].uidt===e.UITypes.Date){const e=this.xlsx.utils.encode_cell({c:r.s.c+n,r:t+ +this.config.firstRowAsHeaders}),o=l[e];i[a.columns[n].column_name]=o&&o.w||s[n]}else a.columns[n].uidt===e.UITypes.SingleLineText||a.columns[n].uidt===e.UITypes.LongText?i[a.columns[n].column_name]=null===s[n]||void 0===s[n]?null:`${s[n]}`:i[a.columns[n].column_name]=s[n];else{const e=this.xlsx.utils.encode_cell({c:r.s.c+n,r:t+ +this.config.firstRowAsHeaders}),o=l[e];i[a.columns[n].column_name]=o&&o.w||s[n]}this.data[o].push(i),t++}}s(!0)}))})(s))))}getTemplate(){return this.project}getData(){return this.data}getColumns(){return this.project.tables.map((e=>e.columns))}}class b extends y{url;excelData;$api;constructor(e,t,s){super({},t,s),this.url=e,this.excelData=null}async init(){this.progress("Downloading excel file");const e=await this.$api.utils.axiosRequestMake({apiMeta:{url:this.url}});this.excelData=e.data,await super.init()}}})(),o})()));