---
description: creating a auth type integration
globs: 
alwaysApply: false
---
# Authentication Integration Guide

This guide provides instructions for creating a new authentication integration package for NocoDB.

## Required Files

An auth integration package requires the following structure:

```
packages/name-auth/
├── package.json          # Package dependencies and metadata
├── tsconfig.json         # TypeScript configuration
└── src/
    ├── index.ts          # Exports the integration entry point
    ├── integration.ts    # Implementation of the AuthIntegration class
    ├── form.ts           # Form definition for configuration UI
    ├── config.ts         # Configuration constants and environment variables
    └── manifest.ts       # Integration metadata (title, icon, version, etc.)
```

## Implementation Steps

1. Create the basic package structure:
```bash
mkdir -p packages/your-provider-auth/src
```

2. Create the package.json file:
See [packages/gitlab-auth/package.json](mdc:packages/gitlab-auth/package.json) for an example.

3. Create the tsconfig.json file:
See [packages/gitlab-auth/tsconfig.json](mdc:packages/gitlab-auth/tsconfig.json) for an example.

4. Implement the AuthIntegration class in `integration.ts`:
```typescript
import { AuthIntegration, AuthType } from '@noco-integrations/core';
import type { AuthResponse } from '@noco-integrations/core';

export class YourProviderAuthIntegration extends AuthIntegration {
  public async authenticate(): Promise<AuthResponse<any>> {
    switch (this.config.type) {
      case AuthType.ApiKey:
        // Implement API Key authentication
        return {
          custom: {
            // Return your provider's client/SDK instance
          },
        };
      case AuthType.OAuth:
        // Implement OAuth authentication
        return {
          custom: {
            // Return your provider's client/SDK instance
          },
        };
      default:
        throw new Error('Not implemented');
    }
  }

  // Implement exchangeToken method for OAuth flow
  public async exchangeToken(payload: {
    code: string;
  }): Promise<{ oauth_token: string }> {
    // Exchange the authorization code for access token
    // and return the token
  }
}
```

5. Define configuration in `config.ts`:
See [packages/gitlab-auth/src/config.ts](mdc:packages/gitlab-auth/src/config.ts) for an example.

6. Create the form definition in `form.ts`:
See [packages/gitlab-auth/src/form.ts](mdc:packages/gitlab-auth/src/form.ts) for an example.

7. Define the integration manifest in `manifest.ts`:
See [packages/gitlab-auth/src/manifest.ts](mdc:packages/gitlab-auth/src/manifest.ts) for an example.

8. Export the integration in `index.ts`:
```typescript
import {
  type IntegrationEntry,
  IntegrationType,
} from '@noco-integrations/core';
import { YourProviderAuthIntegration } from './integration';
import { form } from './form';
import { manifest } from './manifest';

const integration: IntegrationEntry = {
  type: IntegrationType.Auth,
  sub_type: 'your-provider', // Unique identifier for your integration
  wrapper: YourProviderAuthIntegration,
  form,
  manifest,
};

export default integration;
```

## Auth Integration Types

The AuthIntegration class supports different authentication types:

1. **API Key Authentication**: Uses a static API key or token for authentication
2. **OAuth Authentication**: Implements OAuth 2.0 flow for authentication
3. **Basic Authentication**: Uses username/password authentication
4. **Bearer Authentication**: Uses bearer token authentication
5. **Custom Authentication**: Uses a custom authentication method

## Best Practices

1. Use official provider SDKs when available
2. Handle errors appropriately and provide meaningful error messages
3. Store sensitive information like API keys securely
4. Follow the naming convention: `provider-auth` (e.g., `gitlab-auth`, `github-auth`)
5. Start with version 0.1.0 for new integrations

## Examples

For a complete example of an auth integration, see:
- [packages/gitlab-auth](mdc:packages/gitlab-auth/src) for GitLab authentication
- [packages/github-auth](mdc:packages/github-auth/src) for GitHub authentication
