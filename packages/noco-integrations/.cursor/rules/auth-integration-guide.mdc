---
description: creating auth integration
globs: 
alwaysApply: false
---
# Auth Integration Guide

This guide explains how to create a new authentication integration for NocoDB.

## Structure

Every auth integration should follow this structure:

```
packages/provider-auth/
├── package.json          # Package dependencies and metadata
├── tsconfig.json         # TypeScript configuration
├── SETUP.md              # Developer documentation for environment setup and configuration
├── README.md             # User-facing documentation explaining how to use the integration
└── src/
    ├── index.ts          # Exports the integration entry point
    ├── integration.ts    # Implementation of the auth integration class
    ├── form.ts           # Form definition for configuration UI
    ├── manifest.ts       # Integration metadata (title, icon, version)
    └── config.ts         # Configuration constants and environment variables
```

## Implementation Steps

1. **Create the basic package structure**:
   - Use ](mdc:packages/github-auth) as a reference
   - Update package.json with the correct name and dependencies

2. **Implement the core files**:

   a. **config.ts** - Define environment variables and OAuth configuration (if available):
   ```typescript
   /**
    * Centralized configuration for Provider Auth Integration
    */

   // Environment variables (follow naming convention)
   export const clientId = process.env.INTEGRATION_AUTH_PROVIDER_CLIENT_ID;
   export const clientSecret = process.env.INTEGRATION_AUTH_PROVIDER_CLIENT_SECRET;
   export const redirectUri = process.env.INTEGRATION_AUTH_PROVIDER_REDIRECT_URI;

   // OAuth scopes needed for your provider
   export const scopes = ['scope1', 'scope2'];

   // OAuth URIs (customize for your provider)
   export const authUri =
     clientId && redirectUri
       ? `https://provider.com/oauth/authorize?client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes.join(' '))}`
       : '';

   export const tokenUri = 'https://provider.com/oauth/token';
   ```

   b. **integration.ts** - Implement the auth integration class with testConnection method:
   ```typescript
   import axios from 'axios';
   import { AuthIntegration, AuthType } from '@noco-integrations/core';
   import { clientId, clientSecret, tokenUri } from './config';
   import type {
     AuthResponse,
     TestConnectionResponse,
   } from '@noco-integrations/core';

   export class ProviderAuthIntegration extends AuthIntegration {
     public client: ProviderClient | null = null;

     public async authenticate(): Promise<AuthResponse<ProviderClient>> {
       switch (this.config.type) {
         case AuthType.ApiKey:
           if (!this.config.token) {
             throw new Error('Missing required Provider API token');
           }

           this.client = new ProviderClient({
             auth: this.config.token,
           });

           return this.client;
         case AuthType.OAuth:
           if (!this.config.oauth_token) {
             throw new Error('Missing required Provider OAuth token');
           }

           this.client = new ProviderClient({
             auth: this.config.oauth_token,
           });

           return this.client;
         default:
           throw new Error('Not implemented');
       }
     }

     public async testConnection(): Promise<TestConnectionResponse> {
       try {
         const client = await this.authenticate();

         if (!client) {
           return {
             success: false,
             message: 'Missing Provider client',
           };
         }

         // Test connection by calling provider's user/me endpoint
         await client.users.me(); // Adjust based on provider's API
         return {
           success: true,
         };
       } catch (error) {
         return {
           success: false,
           message: error instanceof Error ? error.message : 'Unknown error',
         };
       }
     }

     public async exchangeToken(payload: {
       code: string;
     }): Promise<{ oauth_token: string }> {
       const response = await axios.post(
         tokenUri,
         {
           grant_type: 'authorization_code',
           client_id: clientId,
           client_secret: clientSecret,
           code: payload.code,
           redirect_uri: this.config.redirect_uri, // Include if required by provider
         },
         {
           headers: {
             'Content-Type': 'application/x-www-form-urlencoded', // Adjust based on provider
             Accept: 'application/json',
           },
         },
       );

       return {
         oauth_token: response.data.access_token,
       };
     }
   }
   ```

   c. **manifest.ts** - Define integration metadata:
   ```typescript
   import type { IntegrationManifest } from '@noco-integrations/core';

   export const manifest: IntegrationManifest = {
     title: 'Provider Name',
     icon: 'providerIcon',
     description: 'Provider authentication integration for NocoDB',
     version: '0.1.0',
     author: 'NocoDB',
     website: 'https://provider.com',
     order: 3, // Adjust as needed
   };
   ```

   d. **form.ts** - Create the configuration form with proper TypeScript typing:
   ```typescript
   import { FormBuilderInputType } from '@noco-integrations/core';
   import { AuthType } from '@noco-integrations/core';
   import { authUri, clientId, redirectUri, scopes } from './config';
   import type { FormDefinition } from '@noco-integrations/core';

   export const form: FormDefinition = [
     {
       type: FormBuilderInputType.Input,
       label: 'Integration name',
       width: 100,
       model: 'title',
       placeholder: 'Integration name',
       category: 'General',
       validators: [
         {
           type: FormBuilderValidatorType.Required,
           message: 'Integration name is required',
         },
       ],
     },
     {
       type: FormBuilderInputType.Select,
       label: 'Auth Type',
       width: 48,
       model: 'config.type',
       category: 'Authentication',
       placeholder: 'Select auth type',
       defaultValue: AuthType.ApiKey,
       options: [
         {
           label: 'API Key', // Or 'Personal Access Token' for some providers
           value: AuthType.ApiKey,
         },
         ...(redirectUri && clientId
           ? [
               {
                 label: 'OAuth2',
                 value: AuthType.OAuth,
               },
             ]
           : []),
       ],
       validators: [
         {
           type: FormBuilderValidatorType.Required,
           message: 'Auth type is required',
         },
       ],
     },
     {
       type: FormBuilderInputType.Input,
       label: 'API Token', // Adjust label based on provider (e.g., 'Personal Access Token')
       width: 100,
       model: 'config.token',
       category: 'Authentication',
       placeholder: 'Enter your API Token',
       validators: [
         {
           type: FormBuilderValidatorType.Required,
           message: 'API Token is required',
         },
       ],
       condition: {
         model: 'config.type',
         value: AuthType.ApiKey,
       },
     },
     ...(redirectUri && clientId
       ? [
           {
             type: FormBuilderInputType.OAuth,
             label: 'OAuth Configuration',
             width: 100,
             model: 'config.oauth.code',
             category: 'Authentication',
             validators: [
               {
                 type: FormBuilderValidatorType.Required,
                 message: 'OAuth Configuration is required',
               },
             ],
             condition: {
               model: 'config.type',
               value: AuthType.OAuth,
             },
             oauthMeta: {
               provider: 'Provider Name',
               authUri,
               redirectUri,
               clientId,
               scopes,
             },
           },
         ]
       : []),
   ];
   ```

   e. **index.ts** - Export the integration entry point:
   ```typescript
   import {
     type IntegrationEntry,
     IntegrationType,
   } from '@noco-integrations/core';
   import { Providegrati/form';
   import { manifest } from './manifest';

   const integration: IntegrationEntry = {
     type: IntegrationType.Auth,
     sub_type: 'provider', // Change to your provider's identifier
     wrapper: ProviderAuthIntegration,
     form,
     manifest,
   };

   export default integration;
   ```

3. **Update packning   {
     "name": "@noco-integrations/provider-auth",
     "version": "0.1.0",
     "main": "dist/index.js",
     "types": "dist/index.d.ts",
     "scripts": {
       "build": "tsc",
       "clean": "rimraf dist",
       "lint": "eslint src --ext .ts"
     },
     "dependencies": {
       "@noco-integrations/core": "workspace:*",
       "axios": "^1.9.0",
       "provider-client-library": "^1.0.0"
     },
     "devDependencies": {
       "@types/provider": "^1.0.0", // Include if needed fo types
       "rimraf": "^5.0."typescript": "^5.8.3"
     }
   }
   ```

## Protation Examples

### Example: API Client Initialization Patterns

**GitHub Pattern (using Octokit):**
```typescript
this.client = new Octokit({
  auth: this.config.token,
});
```

**Asana Pattern (using official SDK):**
```typescript
this.client = asana.Client.create();
this.client.useAccessToken(this.config.token);
```

### Example: OAuth URL Construction Patterns

**GitHub Style:**
```typescript
export const authUri =
  clientId && redirectUri
    ? `https://github.com/login/oauth/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${encodeURIComponent(scopes.join(' '))}`
    : '';
```

**Asana Style:**
```typescript
export const authUri =
  clientId && redirectUri
    ? `https://app.asana.com/-/oauth_authorize?client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&response_type=code&scope=${encodeURIComponent(scopes.join(' '))}`
    : '';
```

### Example: Token Exchange Implementation

**Simple Token Exchange (GitHub):**
```typescript
const response = await axios.post(
  tokenUri,
  {
    client_id: clientId,
    client_secret: clientSecret,
    code: payload.code,
  },
  {
    headers: {
      Accept: 'application/json',
    },
  },
);

return {
  oauth_token: response.data.access_token,
};
```

**Standard OAuth Token Exchange (Asana):**
```typescript
const response = await axios.post(
  tokenUri,
  {
    grant_type: 'authorization_code',
    client_id: clientId,
    client_secret: clientSecret,
    code: payload.code,
    redirect_uri: this.config.redirect_uri,
  },
  {
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      Accept: 'application/json',
    },
  },
);

return {
  oauth_token: response.data.access_token,
};
```

## OAuth Environment Variables

For OAuth2 authentication to work, set these environment variables:

```
INTEGRATION_AUTH_PROVIDER_CLIENT_ID=your_provider_client_id
INTEGRATION_AUTH_PROVIDER_CLIENT_SECRET=your_provider_client_secret
INTEGRATION_AUTH_PROVIDER_REDIRECT_URI=your_redirect_uri
```

The naming convention is `INTEGRATION_AUTH_PROVIDER_*` where `PROVIDER` is your integration name in uppercase.

## Documentation Files

Each auth integration should have two primary documentation files:

1. **README.md** - User-facing documentation explaining how to use the integration
2. **SETUP.md** - Developer documentation for environment setup and configuration

## README.md Structure

The README.md should focus on end-users and include:

- Title and brief introduction to the integration
- Features list
- Authentication methods with step-by-step instructions:
  - API Key/Personal Access Token Authentication process
  - OAuth Authentication process (if supported)
- Required permissions and scopes
- Integration-specific considerations

See [packages/github-auth/README.md](mdc:packages/github-auth/README.md) and [packages/asana-auth/README.md](mdc:packages/asana-auth/README.md) for reference implementations.

## SETUP.md Structure

The SETUP.md should focus on administrators and include:

- Environment variables configuration
- Step-by-step OAuth application creation process
- Client ID and secret retrieval instructions
- OAuth scopes and permissions details
- Callback URL configuration
- Provider-specific setup requirements

See [packages/github-auth/SETUP.md](mdc:packages/github-auth/SETUP.md) and [packages/asana-auth/SETUP.md](mdc:packages/asana-auth/SETUP.md) for reference implementations.

## Key Implementation Patterns

1. **Always implement `testConnection()`** - This method validates that the authentication credentials work
2. **Return the client directly from `authenticate()`** - Don't wrap in custom objects unless necessary
3. **Use `FormBuilderValidatorType.Required`** in form validators for proper TypeScript typing
4. **Include proper error handling** with meaningful error messages
5. **Store client instance** as a class property for potential reuse
6. **Handle both API Key and OAuth flows** when both are supported by the provider
7. **Use official SDKs** when available rather than raw HTTP calls

## Implementation Checklist

When creating a new auth integration:

1. ✅ Create basic package structure with all required files
2. ✅ Implement config.ts with proper environment variable naming
3. ✅ Implement integration.ts with authenticate() and testConnection() methods
4. ✅ Create manifest.ts with proper metadata
5. ✅ Build form.ts with proper TypeScript typing using 'as const'
6. ✅ Export integration entry point in index.ts
7. ✅ Update package.json with correct dependencies and scripts
8. ✅ Create SETUP.md with environment setup instructions
9. ✅ Create README.md with user-facing instructions
10. ✅ Test both API Key and OAuth authentication flows (if supported)

## References

- See [GitHub Auth](mdc:packages/github-auth) for a complete OAuth + API Key example
- See [Asana Auth](mdc:packages/asana-auth) for another complete implementation
- See [GitLab Auth](mdc:packages/gitlab-auth) for additional patterns
- Core types are defined in [core/src/auth/types.ts](mdc:core/src/auth/types.ts)