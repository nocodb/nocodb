# syntax=docker/dockerfile:1

################
# NocoDB Builder
################
FROM node:22-alpine AS builder
WORKDIR /usr/src/app

# Install node-gyp dependencies and other build tools
RUN apk add --no-cache \
  g++ \
  make \
  py3-setuptools \
  python3

# Install pnpm
RUN corepack enable && corepack prepare pnpm@9.15.4 --activate

# Copy application dependency manifests to the container image
COPY --link ./package.json ./package.json
COPY --link ./docker/nc-gui/ ./docker/nc-gui/
COPY --link ./docker/main.js ./docker/index.js
COPY --link ./docker/start-local.sh /usr/src/appEntry/start.sh
COPY --link src/public/ ./docker/public/

# Configure pnpm to use hoisted node_modules for modclean compatibility
RUN echo "node-linker=hoisted" > .npmrc

# Install production dependencies, reduce node_modules size with modclean,
# remove sqlite deps, and add execute permission to start.sh
RUN pnpm uninstall nocodb-sdk
RUN pnpm install --prod --shamefully-hoist --reporter=silent \
    && pnpm dlx modclean --patterns="default:*" --ignore="nc-lib-gui/**,dayjs/**,express-status-monitor/**,@azure/msal-node/dist/**,@react-email/**" --run \
    && rm -rf ./node_modules/sqlite3/deps \
    && chmod +x /usr/src/appEntry/start.sh

########
# Runner
########
FROM alpine:3.20
WORKDIR /usr/src/app

ENV NC_DOCKER=0.6 \
    NC_TOOL_DIR=/usr/app/data/ \
    NODE_ENV=production \
    PORT=8080

RUN apk add --update --no-cache \
    curl \
    dumb-init \
    jq \
    nodejs

# Copy production code & main entry file
COPY --link --from=builder /usr/src/app/      /usr/src/app/
COPY --link --from=builder /usr/src/appEntry/ /usr/src/appEntry/

EXPOSE 8080
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start NocoDB
CMD ["/usr/src/appEntry/start.sh"]
