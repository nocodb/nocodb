# syntax=docker/dockerfile:1.5
# Use Buildx cross-compilation

###########
# Litestream Builder
###########
FROM --platform=$BUILDPLATFORM golang:alpine3.19 as lt-builder

WORKDIR /usr/src/

# Use build platform-specific tools
RUN apk --no-cache add git make musl-dev gcc

# Build litestream for target platform
RUN git clone https://github.com/benbjohnson/litestream.git litestream \
    && cd litestream && GOARCH=$(go env GOARCH) GOOS=$(go env GOOS) go install ./cmd/litestream \
    && cp $GOPATH/bin/litestream /usr/src/lt

###########
# Builder
###########
FROM --platform=$BUILDPLATFORM node:18.19.1-alpine as builder
WORKDIR /usr/src/app

# Install node-gyp dependencies
RUN apk add --no-cache python3 make g++

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Copy application dependency manifests to the container image.
COPY --link ./package.json ./package.json
COPY --link ./docker/main.js ./docker/main.js
COPY --link ./docker/start-litestream.sh /usr/src/appEntry/start.sh
COPY --link src/public/ ./docker/public/
COPY --link ./docker/nc-gui/ ./docker/nc-gui/

# For pnpm to generate a flat node_modules without symlinks
# So that modclean works as expected
RUN echo "node-linker=hoisted" > .npmrc

# Install production dependencies, reduce node_module size with modclean
# Removing sqlite deps and add execute permission to start.sh
RUN pnpm install --prod --shamefully-hoist \
    && pnpm dlx modclean --patterns="default:*" --ignore="nc-lib-gui/**,dayjs/**,express-status-monitor/**,@azure/msal-node/dist/**" --run  \
    && rm -rf ./node_modules/sqlite3/deps \
    && chmod +x /usr/src/appEntry/start.sh
#    && (pnpm exec prebuild-install -- --platform=$TARGETPLATFORM --arch=$TARGETARCH -r napi || echo "Prebuilt binary not available") \
#    && npm install sqlite3 --target_arch=$BUILDARCH --target_platform=$BUILDOS --legacy-peer-deps \


############
## Sqlite3 Builder
############
FROM node:18.19.1-alpine as sqlite-builder
WORKDIR /usr/src/app

# Install sqlite3 for the target platform to copy to the final image
RUN npm init -y && npm install sqlite3

###########
# Runner
###########
FROM --platform=$TARGETPLATFORM alpine:3.19
WORKDIR /usr/src/app

ENV LITESTREAM_S3_SKIP_VERIFY=false \
    LITESTREAM_RETENTION=1440h \
    LITESTREAM_RETENTION_CHECK_INTERVAL=72h \
    LITESTREAM_SNAPSHOT_INTERVAL=24h \
    LITESTREAM_SYNC_INTERVAL=60s \
    NC_DOCKER=0.6 \
    NC_TOOL_DIR=/usr/app/data/ \
    NODE_ENV=production \
    PORT=8080

RUN apk add --update --no-cache dasel dumb-init nodejs

# Copy litestream binary and config file
COPY --link --from=lt-builder /usr/src/lt /usr/local/bin/litestream
COPY --link ./docker/litestream.yml /etc/litestream.yml

# Copy production code & main entry file
COPY --link --from=builder /usr/src/app/ /usr/src/app/
COPY --link --from=sqlite-builder /usr/src/app/node_modules/sqlite3/ /usr/src/app/node_modules/sqlite3/
COPY --link --from=builder /usr/src/appEntry/ /usr/src/appEntry/

EXPOSE 8080
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start Nocodb
CMD ["/usr/src/appEntry/start.sh"]
