import {
  _wherePk,
  BaseModelSqlv2 as BaseModelSqlv2CE,
  extractCondition,
  extractFilterFromXwhere,
  extractSortsObject,
  getListArgs,
  populatePk,
} from 'src/db/BaseModelSqlv2';
import type { Column, Model } from '~/models';
import { Base, View } from '~/models';
import { singleQueryRead } from '~/services/data-opt/helpers';

/**
 * Base class for models
 *
 * @class
 * @classdesc Base class for models
 */
class BaseModelSqlv2 extends BaseModelSqlv2CE {
  public schema?: string;

  constructor({
    dbDriver,
    model,
    viewId,
    schema,
  }: {
    [key: string]: any;
    model: Model;
    schema?: string;
  }) {
    super({ dbDriver, model, viewId });
    this.schema = schema;
  }

  public getTnPath(tb: { table_name: string } | string, alias?: string) {
    const tn = typeof tb === 'string' ? tb : tb.table_name;
    const schema = (this.dbDriver as any).searchPath?.();
    if (this.isPg && this.schema) {
      return `${this.schema}.${tn}${alias ? ` as ${alias}` : ``}`;
    } else if (this.isMssql && schema) {
      return this.dbDriver.raw(`??.??${alias ? ' as ??' : ''}`, [
        schema,
        tn,
        ...(alias ? [alias] : []),
      ]);
    } else if (this.isSnowflake) {
      return `${[
        this.dbDriver.client.config.connection.database,
        this.dbDriver.client.config.connection.schema,
        tn,
      ].join('.')}${alias ? ` as ${alias}` : ``}`;
    } else {
      return `${tn}${alias ? ` as ${alias}` : ``}`;
    }
  }

  async insert(data, trx?, cookie?, disableOptimization = false) {
    try {
      await populatePk(this.model, data);

      // todo: filter based on view
      const insertObj = await this.model.mapAliasToColumn(
        data,
        this.clientMeta,
        this.dbDriver,
      );

      await this.validate(insertObj);

      if ('beforeInsert' in this) {
        await this.beforeInsert(insertObj, trx, cookie);
      }

      await this.model.getColumns();
      let response;
      // const driver = trx ? trx : this.dbDriver;

      const query = this.dbDriver(this.tnPath).insert(insertObj);
      if ((this.isPg || this.isMssql) && this.model.primaryKey) {
        query.returning(
          `${this.model.primaryKey.column_name} as ${this.model.primaryKey.title}`,
        );
        response = await this.execAndParse(query);
      }

      const ai = this.model.columns.find((c) => c.ai);

      let ag: Column;
      if (!ai) ag = this.model.columns.find((c) => c.meta?.ag);

      const base = await Base.get(this.model.base_id);
      const view = this.viewId ? await View.get(this.viewId) : null;

      // handle if autogenerated primary key is used
      if (ag) {
        if (!response) await this.execAndParse(query);
        response = await (base.type === 'pg' && !disableOptimization
          ? singleQueryRead({
              model: this.model,
              view,
              id: data[ag.title],
              params: {},
              base,
            })
          : this.readByPk(
              data[ag.title],
              false,
              {},
              { ignoreView: true, getHiddenColumn: true },
            ));
      } else if (
        !response ||
        (typeof response?.[0] !== 'object' && response?.[0] !== null)
      ) {
        let id;
        if (response?.length) {
          id = response[0];
        } else {
          const res = await this.execAndParse(query);
          id = res?.id ?? res[0]?.insertId;
        }

        if (ai) {
          if (this.isSqlite) {
            // sqlite doesnt return id after insert
            id = (
              await this.dbDriver(this.tnPath)
                .select(ai.column_name)
                .max(ai.column_name, { as: 'id' })
            )[0].id;
          } else if (this.isSnowflake) {
            id = (
              (await this.dbDriver(this.tnPath).max(ai.column_name, {
                as: 'id',
              })) as any
            )[0].id;
          }
          response = await this.readByPk(
            id,
            false,
            {},
            { ignoreView: true, getHiddenColumn: true },
          );
        } else {
          response = data;
        }
      } else if (ai) {
        const id = Array.isArray(response)
          ? response?.[0]?.[ai.title]
          : response?.[ai.title];
        response =
          base.type === 'pg' && !disableOptimization
            ? await singleQueryRead({
                model: this.model,
                view,
                id,
                params: {},
                base,
              })
            : await this.readByPk(
                id,
                false,
                {},
                { ignoreView: true, getHiddenColumn: true },
              );
      }

      await this.afterInsert(response, trx, cookie);
      return Array.isArray(response) ? response[0] : response;
    } catch (e) {
      console.log(e);
      await this.errorInsert(e, data, trx, cookie);
      throw e;
    }
  }

  async updateByPk(id, data, trx?, cookie?, disableOptimization = false) {
    try {
      const updateObj = await this.model.mapAliasToColumn(
        data,
        this.clientMeta,
        this.dbDriver,
      );

      await this.validate(data);

      await this.beforeUpdate(data, trx, cookie);

      const view = await View.get(this.viewId);
      const base = await Base.get(this.model.base_id);
      const prevData =
        base.type === 'pg' && !disableOptimization
          ? await singleQueryRead({
              model: this.model,
              view,
              id,
              params: {},
              base,
            })
          : await this.readByPk(
              id,
              false,
              {},
              { ignoreView: true, getHiddenColumn: true },
            );

      const query = this.dbDriver(this.tnPath)
        .update(updateObj)
        .where(await this._wherePk(id));

      await this.execAndParse(query);

      // const newData = await this.readByPk(id, false, {}, { ignoreView: true, getHiddenColumn: true });

      // const prevData = await this.readByPk(id);

      const newData =
        base.type === 'pg' && !disableOptimization
          ? await singleQueryRead({
              model: this.model,
              view,
              id,
              params: {},
              base,
            })
          : await this.readByPk(
              id,
              false,
              {},
              { ignoreView: true, getHiddenColumn: true },
            );
      await this.afterUpdate(prevData, newData, trx, cookie, updateObj);
      return newData;
    } catch (e) {
      console.log(e);
      await this.errorUpdate(e, data, trx, cookie);
      throw e;
    }
  }
}

export {
  BaseModelSqlv2,
  _wherePk,
  extractCondition,
  extractFilterFromXwhere,
  extractSortsObject,
  getListArgs,
};
