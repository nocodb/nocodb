{
  "openapi": "3.1.0",
  "x-stoplight": {
    "id": "qiz1rcfqd2jy6"
  },
  "info": {
    "title": "nocodb",
    "version": "1.0",
    "description": "NocoDB API Documentation"
  },
  "x-tagGroups": [
    {
      "name": "Auth APIs",
      "tags": [
        "Auth",
        "API Token"
      ]
    },
    {
      "name": "Public APIs",
      "tags": [
        "Public"
      ]
    },
    {
      "name": "Data APIs",
      "tags": [
        "DB Table Row",
        "DB View Row",
        "Storage"
      ]
    },
    {
      "name": "Meta APIs",
      "tags": [
        "Source",
        "DB Table",
        "DB Table Column",
        "DB Table Filter",
        "DB Table Sort",
        "DB Table Webhook",
        "DB Table Webhook Filter",
        "DB View",
        "DB View Column",
        "DB View Share",
        "Plugin",
        "Base",
        "Utils"
      ]
    },
    {
      "name": "Organisation APIs",
      "tags": [
        "Org App Settings",
        "Org License",
        "Org Tokens",
        "Org Users"
      ]
    }
  ],
  "servers": [
    {
      "url": "http://localhost:8080"
    }
  ],
  "paths": {
    "/api/v2/tables/{tableId}/bulk/aggregate": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "tableId",
          "in": "path",
          "required": true,
          "description": "Table ID"
        },
        {
          "schema": {
            "type": "string"
          },
          "required": true,
          "name": "viewId",
          "in": "query",
          "description": "View ID is required"
        },
        {
          "schema": {
            "type": "array",
            "description": "List of fields to be aggregated",
            "items": {
              "type": "object"
            }
          },
          "in": "query",
          "name": "aggregation",
          "description": "Used for selective aggregation"
        }
      ],
      "post": {
        "summary": "Read Bulk Aggregated Data",
        "operationId": "db-data-table-bulk-aggregate",
        "description": "Read bulk aggregated data from a given table with given filters",
        "tags": [
          "DB Data Table Bulk Aggregate"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where",
            "description": "Extra filtering"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "filterArrJson",
            "description": "Used for multiple filter queries"
          },
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "alias": {
                        "Id": 1,
                        "Title": "90",
                        "SingleSelect": "50"
                      },
                      "alias2": {
                        "Id": 2,
                        "Title": "50",
                        "SingleSelect": "30"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/api/v2/public/shared-view/{sharedViewUuid}/bulk/aggregate": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "24a6d0bb-e45d-4b1a-bfef-f492d870de9f"
          },
          "name": "sharedViewUuid",
          "in": "path",
          "required": true,
          "description": "Shared View UUID"
        },
        {
          "schema": {
            "type": "string"
          },
          "in": "header",
          "name": "xc-password",
          "description": "Shared view password"
        }
      ],
      "post": {
        "summary": "Read Shared View Bulk Aggregated Data",
        "operationId": "public-data-table-bulk-aggregate",
        "description": "Read bulk aggregated data from a given table with provided filters",
        "tags": [
          "Public"
        ],
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "where",
            "description": "Extra filtering"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "filterArrJson",
            "description": "Used for multiple filter queries"
          },
          {
            "schema": {
              "type": "array",
              "description": "List of fields to be aggregated",
              "items": {
                "type": "object"
              }
            },
            "in": "query",
            "name": "aggregation",
            "description": "Used for selective aggregation"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "alias": {
                        "Id": 1,
                        "Title": "90",
                        "SingleSelect": "50"
                      },
                      "alias2": {
                        "Id": 2,
                        "Title": "50",
                        "SingleSelect": "30"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/api/v2/meta/comment/{commentId}/resolve": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "adt_zlskd6rlf3liay"
          },
          "name": "commentId",
          "in": "path",
          "required": true,
          "description": "Comment ID"
        },
        {
          "name": "xc-auth",
          "in": "header",
          "required": false,
          "schema": {
            "type": "string"
          },
          "description": "Auth Token is a JWT Token generated based on the logged-in user. By default, the token is only valid for 10 hours. However, you can change the value by defining it using environment variable NC_JWT_EXPIRES_IN."
        }
      ],
      "post": {
        "summary": "Resolve Comment",
        "operationId": "utils-comment-resolve",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number",
                  "example": 1
                },
                "examples": {
                  "Example 1": {
                    "value": 1
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Utils"
        ],
        "description": "Resolve comment",
        "requestBody": {
          "content": {
            "application/json": {}
          }
        }
      }
    },
    "/api/v1/workspaces": {
      "get": {
        "summary": "List workspaces",
        "operationId": "workspace-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceList"
                }
              }
            }
          }
        },
        "tags": [
          "Workspace"
        ],
        "description": "List workspaces"
      },
      "post": {
        "summary": "Create workspace",
        "operationId": "workspace-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Workspace"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/Workspace"
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Workspace"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/Workspace"
                  }
                ]
              }
            }
          }
        },
        "tags": [
          "Workspace"
        ],
        "description": "Create workspace"
      },
      "parameters": []
    },
    "/api/v1/workspaces/{workspaceId}": {
      "get": {
        "summary": "Read workspace",
        "operationId": "workspace-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "workspace": {
                      "$ref": "#/components/schemas/Workspace",
                      "required": true
                    },
                    "workspaceUserCount": {
                      "type": "number",
                      "required": true
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Workspace"
        ],
        "description": "Read workspace"
      },
      "patch": {
        "summary": "Update workspace",
        "operationId": "workspace-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Workspace"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workspace"
              }
            }
          }
        },
        "description": "Update workspace"
      },
      "delete": {
        "summary": "Delete workspace",
        "operationId": "workspace-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Workspace"
        ],
        "description": "Delete workspace"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/workspaces/{workspaceId}/upgrade": {
      "post": {
        "summary": "Upgrade workspace",
        "operationId": "workspace-upgrade",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                }
              }
            }
          }
        },
        "tags": [
          "Workspace"
        ],
        "description": "Upgrade workspace"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/workspaces/{workspaceId}/users": {
      "get": {
        "summary": "Workspace users list",
        "operationId": "workspace-user-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceUserList"
                }
              }
            }
          }
        },
        "tags": [
          "Workspace user"
        ],
        "description": "Workspace users list"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "boolean"
          },
          "name": "includeDeleted",
          "in": "query"
        }
      ]
    },
    "/api/v1/workspaces/{workspaceId}/bases": {
      "get": {
        "summary": "Workspace bases list",
        "operationId": "workspace-base-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectList"
                }
              }
            }
          }
        },
        "tags": [
          "Workspace base"
        ],
        "description": "Workspace bases list"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/workspaces/{toWorkspaceId}/bases/{baseId}/move": {
      "post": {
        "summary": "Workspace base move",
        "operationId": "workspace-base-move",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {}
            }
          }
        },
        "tags": [
          "Workspace base"
        ],
        "description": "Workspace bases list"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "toWorkspaceId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "baseId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/workspaces/{workspaceId}/invitations": {
      "post": {
        "summary": "Workspace user invite",
        "operationId": "workspace-user-invite",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceUserInvite"
              }
            }
          }
        },
        "tags": [
          "Workspace user"
        ],
        "description": "Workspace user invite"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/workspaces/{workspaceId}/users/{userId}": {
      "get": {
        "summary": "Workspace user read",
        "operationId": "workspace-user-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceUser"
                }
              }
            }
          }
        },
        "tags": [
          "Workspace user"
        ],
        "description": "Workspace user read"
      },
      "patch": {
        "summary": "Update workspace user",
        "operationId": "workspace-user-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Workspace user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "roles": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "description": "Update workspace user"
      },
      "delete": {
        "summary": "Delete workspace user",
        "operationId": "workspace-user-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Workspace User"
        ],
        "description": "Delete workspace user"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "userId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v2/meta/filters/{filterId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "pattern": "fi_pgfuo11uhn2xeo"
          },
          "name": "filterId",
          "in": "path",
          "required": true,
          "description": "Unique Filter ID"
        }
      ],
      "get": {
        "summary": "Get Filter",
        "operationId": "db-table-filter-get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "source_id": "ds_g4ccx6e77h1dmi",
                      "comparison_op": "eq",
                      "comparison_sub_op": null,
                      "created_at": "2023-03-02 18:18:05",
                      "fk_column_id": "cl_d7ah9n2qfupgys",
                      "fk_hook_id": null,
                      "fk_parent_id": null,
                      "fk_view_id": "vw_b739e29vqmrxnf",
                      "id": "fi_xn647tpmdq8fu8",
                      "is_group": null,
                      "logical_op": "and",
                      "order": 1,
                      "base_id": "p_xm3thidrblw4n7",
                      "updated_at": "2023-03-02 18:18:05",
                      "value": "foo"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "description": "Get the filter data with a given Filter ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      },
      "patch": {
        "summary": "Update Filter",
        "operationId": "db-table-filter-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                },
                "examples": {
                  "Example 1": {
                    "value": 1
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterReq"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "comparison_op": "eq",
                    "comparison_sub_op": null,
                    "fk_column_id": "cl_d7ah9n2qfupgys",
                    "is_group": false,
                    "logical_op": "and",
                    "value": "foo"
                  }
                }
              }
            }
          }
        },
        "description": "Update the filter data with a given Filter ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      },
      "delete": {
        "summary": "Delete Filter",
        "operationId": "db-table-filter-delete",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "examples": {
                  "Example 1": {
                    "value": true
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "description": "Delete the filter data with a given Filter ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      }
    },
    "/api/v2/meta/filters/{filterGroupId}/children": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "example": "fi_pgfuo11uhn2xeo",
            "description": "Filter Group ID"
          },
          "name": "filterGroupId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Filter Group Children",
        "operationId": "db-table-filter-children-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterList"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "list": [
                        {
                          "source_id": "ds_g4ccx6e77h1dmi",
                          "comparison_op": "eq",
                          "comparison_sub_op": null,
                          "created_at": "2023-03-02 18:18:05",
                          "fk_column_id": "cl_d7ah9n2qfupgys",
                          "fk_hook_id": null,
                          "fk_parent_id": null,
                          "fk_view_id": "vw_b739e29vqmrxnf",
                          "id": "fi_xn647tpmdq8fu8",
                          "is_group": null,
                          "logical_op": "and",
                          "order": 1,
                          "base_id": "p_xm3thidrblw4n7",
                          "updated_at": "2023-03-02 18:18:05",
                          "value": "foo"
                        }
                      ],
                      "pageInfo": {
                        "isFirstPage": true,
                        "isLastPage": true,
                        "page": 1,
                        "pageSize": 10,
                        "totalRows": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "description": "Get Filter Group Children of a given group ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      }
    },
    "/api/v1/cowriter/meta/tables/{tableId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Cowriter Create",
        "operationId": "cowriter-table-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cowriter"
                }
              }
            }
          }
        },
        "tags": [
          "Cowriter Table"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Cowriter List",
        "operationId": "cowriter-table-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CowriterList"
                }
              }
            }
          }
        },
        "tags": [
          "Cowriter Table"
        ]
      }
    },
    "/api/v1/cowriter/meta/tables/{tableId}/{cowriterId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "cowriterId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Cowriter Get",
        "operationId": "cowriter-table-get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CowriterList"
                }
              }
            }
          },
          "": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cowriter"
                }
              }
            }
          }
        },
        "tags": [
          "Cowriter Table"
        ]
      },
      "patch": {
        "summary": "Cowriter Patch",
        "operationId": "cowriter-table-patch",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Cowriter Table"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Cowriter"
              }
            }
          }
        }
      }
    },
    "/api/v1/cowriter/meta/tables/{tableId}/generate-columns": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Cowriter Generate Columns",
        "operationId": "cowriter-table-generate-columns",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Generate Columns using AI",
        "tags": [
          "Cowriter Table"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/cowriter/meta/tables/{tableId}/bulk": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "tableId",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Cowriter Create Bulk",
        "operationId": "cowriter-table-create-bulk",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "",
        "tags": [
          "Cowriter Table"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Cowriter"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/meta/duplicate/{workspaceId}/shared/{sharedBaseId}": {
      "post": {
        "summary": "Duplicate Shared Base",
        "operationId": "base-duplicate-shared",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "options": {
                    "type": "object",
                    "properties": {
                      "excludeData": {
                        "type": "boolean",
                        "required": false
                      },
                      "excludeViews": {
                        "type": "boolean",
                        "required": false
                      }
                    }
                  },
                  "base": {
                    "type": "object",
                    "required": false
                  }
                }
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "excludeData": true,
                    "excludeViews": true,
                    "excludeHooks": true
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Base"
        ],
        "description": "Duplicate a shared base",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          },
          {
            "schema": {
              "$ref": "#/components/schemas/Id",
              "example": "w_124hhlkbeasewh",
              "type": "string"
            },
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "description": "Unique Workspace ID"
          },
          {
            "name": "sharedBaseId",
            "in": "path",
            "required": true,
            "description": "Unique Shared Base ID"
          }
        ]
      }
    },
    "/api/v2/sso-clients": {
      "get": {
        "summary": "Get SSO Client",
        "tags": [
          "SSO Client"
        ],
        "operationId": "sso-client-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOClientList"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create SSO Client",
        "operationId": "sso-client-create",
        "tags": [
          "SSO Client"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOClient"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SSOClient"
              }
            }
          }
        }
      }
    },
    "/api/v2/sso-clients/{clientId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "clientId",
          "in": "path",
          "required": true,
          "description": "Unique SSO Client ID"
        }
      ],
      "patch": {
        "summary": "Update SSO Client",
        "tags": [
          "SSO Client"
        ],
        "operationId": "sso-client-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SSOClient"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete SSO Client",
        "operationId": "sso-client-delete",
        "tags": [
          "SSO Client"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        }
      }
    },
    "/api/v2/orgs/{orgId}/bases": {
      "get": {
        "summary": "Get Org Bases",
        "tags": [
          "Org Bases"
        ],
        "operationId": "org-base-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgBaseList"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/orgs/{orgId}/users": {
      "get": {
        "summary": "Get Org Users",
        "tags": [
          "Org User"
        ],
        "operationId": "org-user-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgUserList"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/orgs/{orgId}/workspaces": {
      "get": {
        "summary": "Get Org Workspaces",
        "tags": [
          "Org Workspace"
        ],
        "operationId": "org-workspace-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceList"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/orgs/{orgId}/workspaces/{workspaceId}": {
      "post": {
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "orgId",
            "in": "path",
            "required": true,
            "description": "Unique Organisation ID"
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "description": "Unique Workspace ID"
          }
        ],
        "summary": "Add Workspace to Organisation",
        "tags": [
          "Org Workspace"
        ],
        "operationId": "org-workspace-add",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v2/orgs/{orgId}/sso-clients": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "orgId",
            "in": "path",
            "required": true,
            "description": "Unique Organisation ID"
          }
        ],
        "summary": "Get SSO Client",
        "tags": [
          "Org SSO Client"
        ],
        "operationId": "org-sso-client-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOClientList"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create SSO Client",
        "operationId": "org-sso-client-create",
        "tags": [
          "Org SSO Client"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOClient"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SSOClient"
              }
            }
          }
        }
      }
    },
    "/api/v2/orgs/{orgId}/sso-clients/{clientId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgId",
          "in": "path",
          "required": true,
          "description": "Unique Organisation ID"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "clientId",
          "in": "path",
          "required": true,
          "description": "Unique SSO Client ID"
        }
      ],
      "patch": {
        "summary": "Update SSO Client",
        "tags": [
          "Org SSO Client"
        ],
        "operationId": "org-sso-client-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SSOClient"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete SSO Client",
        "operationId": "org-sso-client-delete",
        "tags": [
          "Org SSO Client"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        }
      }
    },
    "/api/v2/workspaces/{workspaceId}/sso-clients": {
      "get": {
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "workspaceId",
            "in": "path",
            "required": true,
            "description": "Unique Workspace ID"
          }
        ],
        "summary": "Get SSO Client",
        "tags": [
          "Workspace SSO Client"
        ],
        "operationId": "workspace-sso-client-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOClientList"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create SSO Client",
        "operationId": "workspace-sso-client-create",
        "tags": [
          "Workspace SSO Client"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SSOClient"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SSOClient"
              }
            }
          }
        }
      }
    },
    "/api/v2/workspaces/{workspaceId}/sso-clients/{clientId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true,
          "description": "Unique Workspace ID"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "clientId",
          "in": "path",
          "required": true,
          "description": "Unique SSO Client ID"
        }
      ],
      "patch": {
        "summary": "Update SSO Client",
        "tags": [
          "Workspace SSO Client"
        ],
        "operationId": "workspace-sso-client-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SSOClient"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete SSO Client",
        "operationId": "workspace-sso-client-delete",
        "tags": [
          "Workspace SSO Client"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        }
      }
    },
    "/api/v2/orgs/workspaces/{workspaceId}/upgrade": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true,
          "description": "Unique Workspace ID"
        }
      ],
      "post": {
        "summary": "Migrate Workspace to Organisation",
        "tags": [
          "Org Workspace"
        ],
        "operationId": "org-workspace-upgrade",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        }
      }
    },
    "/api/v2/orgs/{orgId}/domains": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgId",
          "in": "path",
          "required": true,
          "description": "Unique Organisation ID"
        }
      ],
      "get": {
        "summary": "Get Org Domains",
        "tags": [
          "Org Domain"
        ],
        "operationId": "org-domain-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgDomainList"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Org Domain",
        "tags": [
          "Org Domain"
        ],
        "operationId": "org-domain-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainReq"
              }
            }
          }
        }
      }
    },
    "/api/v2/workspaces/{workspaceId}/domains": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true,
          "description": "Unique Workspace ID"
        }
      ],
      "get": {
        "summary": "Get Workspace Domains",
        "tags": [
          "Workspace Domain"
        ],
        "operationId": "workspace-domain-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgDomainList"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create Workspace Domain",
        "tags": [
          "Workspace Domain"
        ],
        "operationId": "workspace-domain-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainReq"
              }
            }
          }
        }
      }
    },
    "/api/v2/orgs/{orgId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "orgId",
          "in": "path",
          "required": true,
          "description": "Unique Organisation ID"
        }
      ],
      "get": {
        "summary": "Get Org",
        "tags": [
          "Org"
        ],
        "operationId": "org-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Org"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update Org",
        "tags": [
          "Org"
        ],
        "operationId": "org-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Org"
              }
            }
          }
        }
      }
    },
    "/api/v2/domains/{domainId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "domainId",
          "in": "path",
          "required": true,
          "description": "Unique Domain ID"
        }
      ],
      "patch": {
        "summary": "Update Domain",
        "tags": [
          "Org Domain"
        ],
        "operationId": "org-domain-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainReq"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Domain",
        "tags": [
          "Org Domain"
        ],
        "operationId": "org-domain-delete",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        }
      }
    },
    "/api/v2/domains/{domainId}/verify": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "domainId",
          "in": "path",
          "required": true,
          "description": "Unique Domain ID"
        }
      ],
      "post": {
        "summary": "Update Domain",
        "tags": [
          "Org Domain"
        ],
        "operationId": "org-domain-verify",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        }
      }
    },
    "/api/v2/sso": {
      "post": {
        "summary": "Get SSO Client",
        "tags": [
          "Org SSO Client"
        ],
        "operationId": "org-sso-client-get-by-email",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
              }
            }
          }
        }
      }
    },
    "/api/v2/meta/links/{columnId}/filters": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "example": "cl_0063k4o1frnxbr"
          },
          "name": "columnId",
          "in": "path",
          "required": true,
          "description": "Unique Link Column ID"
        }
      ],
      "get": {
        "summary": "Get Link Filter",
        "operationId": "db-table-link-filter-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterList"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "list": [
                        {
                          "source_id": "ds_g4ccx6e77h1dmi",
                          "comparison_op": "eq",
                          "comparison_sub_op": null,
                          "created_at": "2023-03-02 18:18:05",
                          "fk_column_id": "cl_d7ah9n2qfupgys",
                          "fk_hook_id": null,
                          "fk_parent_id": null,
                          "fk_view_id": "vw_b739e29vqmrxnf",
                          "id": "fi_xn647tpmdq8fu8",
                          "is_group": null,
                          "logical_op": "and",
                          "order": 1,
                          "base_id": "p_xm3thidrblw4n7",
                          "updated_at": "2023-03-02 18:18:05",
                          "value": "foo"
                        }
                      ],
                      "pageInfo": {
                        "isFirstPage": true,
                        "isLastPage": true,
                        "page": 1,
                        "pageSize": 10,
                        "totalRows": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "DB Table Link Filter"
        ],
        "description": "Get the filter data in a given Link",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      },
      "post": {
        "summary": "Create Link Filter",
        "operationId": "db-table-link-filter-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "source_id": "ds_g4ccx6e77h1dmi",
                      "comparison_op": "eq",
                      "comparison_sub_op": null,
                      "created_at": "2023-03-02 18:18:05",
                      "fk_column_id": "cl_d7ah9n2qfupgys",
                      "fk_hook_id": null,
                      "fk_parent_id": null,
                      "fk_view_id": "vw_b739e29vqmrxnf",
                      "id": "fi_xn647tpmdq8fu8",
                      "is_group": null,
                      "logical_op": "and",
                      "order": 1,
                      "base_id": "p_xm3thidrblw4n7",
                      "updated_at": "2023-03-02 18:18:05",
                      "value": "foo"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "DB Table Link Filter"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterReq"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "comparison_op": "eq",
                    "comparison_sub_op": null,
                    "fk_column_id": "cl_d7ah9n2qfupgys",
                    "is_group": false,
                    "logical_op": "and",
                    "value": "foo"
                  }
                }
              }
            }
          }
        },
        "description": "Create filter(s) in a given Link",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      }
    },
    "/api/v2/meta/audits": {
      "parameters": [],
      "get": {
        "summary": "List Global Audits",
        "operationId": "global-audit-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "list": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "$ref": "#/components/schemas/Audit"
                      }
                    },
                    "pageInfo": {
                      "$ref": "#/components/schemas/Paginated"
                    }
                  },
                  "required": [
                    "list",
                    "pageInfo"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "description": "List all audit data in the given workspace",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "user"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "name": "type"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "workspaceId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "baseId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "sourceId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startDate"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endDate"
          },
          {
            "schema": {
              "properties": {
                "created_at": {
                  "type": "string",
                  "description": "Sort direction",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "example": "desc"
                },
                "user": {
                  "type": "string",
                  "description": "Sort direction",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "example": "desc"
                }
              },
              "type": "object"
            },
            "in": "query",
            "name": "orderBy"
          },
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ],
        "tags": [
          "Audits"
        ]
      }
    },
    "/api/v2/meta/workspace/{workspaceId}/audits": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "example": "p_124hhlkbeasewh",
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true,
          "description": "Unique Workspace ID"
        }
      ],
      "get": {
        "summary": "List Audits in Workspace",
        "operationId": "workspace-audit-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "list": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "$ref": "#/components/schemas/Audit"
                      }
                    },
                    "pageInfo": {
                      "$ref": "#/components/schemas/Paginated"
                    }
                  },
                  "required": [
                    "list",
                    "pageInfo"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "description": "List all audit data in the given workspace",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "user"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "name": "type"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "baseId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "sourceId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startDate"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endDate"
          },
          {
            "schema": {
              "properties": {
                "created_at": {
                  "type": "string",
                  "description": "Sort direction",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "example": "desc"
                },
                "user": {
                  "type": "string",
                  "description": "Sort direction",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "example": "desc"
                }
              },
              "type": "object"
            },
            "in": "query",
            "name": "orderBy"
          },
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ],
        "tags": [
          "Workspace"
        ]
      }
    },
    "/api/v1/db/meta/projects/audits": {
      "parameters": [
        {
          "$ref": "#/components/parameters/xc-auth"
        }
      ],
      "get": {
        "summary": "List Audits in Project",
        "operationId": "project-audit-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "list": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "$ref": "#/components/schemas/Audit"
                      }
                    },
                    "pageInfo": {
                      "$ref": "#/components/schemas/Paginated"
                    }
                  },
                  "required": [
                    "list",
                    "pageInfo"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "description": "List all audit data in the given project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "user"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "type"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "baseId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "sourceId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startDate"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endDate"
          },
          {
            "schema": {
              "properties": {
                "created_at": {
                  "type": "string",
                  "description": "Sort direction",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "example": "desc"
                },
                "user": {
                  "type": "string",
                  "description": "Sort direction",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "example": "desc"
                }
              },
              "type": "object"
            },
            "in": "query",
            "name": "orderBy"
          },
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ],
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v1/db/meta/projects/{baseId}/audits": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "example": "p_124hhlkbeasewh",
            "type": "string"
          },
          "name": "baseId",
          "in": "path",
          "required": true,
          "description": "Unique Base ID"
        }
      ],
      "get": {
        "summary": "List Audits in Base",
        "operationId": "base-audit-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "list": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "$ref": "#/components/schemas/Audit"
                      }
                    },
                    "pageInfo": {
                      "$ref": "#/components/schemas/Paginated"
                    }
                  },
                  "required": [
                    "list",
                    "pageInfo"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "description": "List all audit data in the given base",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "sourceId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "user"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "type"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startDate"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endDate"
          },
          {
            "schema": {
              "properties": {
                "created_at": {
                  "type": "string",
                  "description": "Sort direction",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "example": "desc"
                },
                "user": {
                  "type": "string",
                  "description": "Sort direction",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "example": "desc"
                }
              },
              "type": "object"
            },
            "in": "query",
            "name": "orderBy"
          },
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ],
        "tags": [
          "Base"
        ]
      }
    },
    "/api/v2/meta/projects/audits": {
      "parameters": [
        {
          "$ref": "#/components/parameters/xc-auth"
        }
      ],
      "get": {
        "summary": "List Audits in Project",
        "operationId": "project-audit-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "list": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "$ref": "#/components/schemas/Audit"
                      }
                    },
                    "pageInfo": {
                      "$ref": "#/components/schemas/Paginated"
                    }
                  },
                  "required": [
                    "list",
                    "pageInfo"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "description": "List all audit data in the given project",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "user"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "type"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "baseId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "sourceId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startDate"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endDate"
          },
          {
            "schema": {
              "properties": {
                "created_at": {
                  "type": "string",
                  "description": "Sort direction",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "example": "desc"
                },
                "user": {
                  "type": "string",
                  "description": "Sort direction",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "example": "desc"
                }
              },
              "type": "object"
            },
            "in": "query",
            "name": "orderBy"
          },
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ],
        "tags": [
          "Utils"
        ]
      }
    },
    "/api/v2/meta/bases/{baseId}/audits": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "example": "p_124hhlkbeasewh",
            "type": "string"
          },
          "name": "baseId",
          "in": "path",
          "required": true,
          "description": "Unique Base ID"
        }
      ],
      "get": {
        "summary": "List Audits in Base",
        "operationId": "base-audit-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "list": {
                      "type": "array",
                      "uniqueItems": true,
                      "items": {
                        "$ref": "#/components/schemas/Audit"
                      }
                    },
                    "pageInfo": {
                      "$ref": "#/components/schemas/Paginated"
                    }
                  },
                  "required": [
                    "list",
                    "pageInfo"
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "description": "List all audit data in the given base",
        "parameters": [
          {
            "schema": {
              "type": "integer",
              "minimum": 0
            },
            "in": "query",
            "name": "offset"
          },
          {
            "schema": {
              "type": "integer",
              "minimum": 1
            },
            "in": "query",
            "name": "limit"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "sourceId"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "user"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "type"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "startDate"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "endDate"
          },
          {
            "schema": {
              "properties": {
                "created_at": {
                  "type": "string",
                  "description": "Sort direction",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "example": "desc"
                },
                "user": {
                  "type": "string",
                  "description": "Sort direction",
                  "enum": [
                    "asc",
                    "desc"
                  ],
                  "example": "desc"
                }
              },
              "type": "object"
            },
            "in": "query",
            "name": "orderBy"
          },
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ],
        "tags": [
          "Base"
        ]
      }
    },
    "/api/v2/meta/integrations": {},
    "/api/v2/meta/workspaces/{workspaceId}/integrations": {
      "get": {
        "summary": "List integrations",
        "operationId": "integration-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationList"
                }
              }
            }
          }
        },
        "tags": [
          "Integration"
        ],
        "description": "List integrations",
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/Integrations"
            },
            "name": "type",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "name": "includeDatabaseInfo",
            "in": "query"
          },
          {
            "schema": {
              "type": "number"
            },
            "name": "limit",
            "in": "query"
          },
          {
            "schema": {
              "type": "number"
            },
            "name": "offset",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "baseId",
            "in": "query"
          },
          {
            "schema": {
              "type": "string"
            },
            "name": "query",
            "in": "query"
          }
        ]
      },
      "post": {
        "summary": "Create itegration",
        "operationId": "integration-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationReq"
              }
            }
          }
        },
        "tags": [
          "Integration"
        ],
        "description": "Create integration"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v2/meta/integrations/{integrationId}": {
      "get": {
        "summary": "Read integration",
        "operationId": "integration-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            }
          }
        },
        "tags": [
          "Integration"
        ],
        "description": "Read integration",
        "parameters": [
          {
            "schema": {
              "type": "boolean"
            },
            "name": "includeConfig",
            "in": "query"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "name": "includeSources",
            "in": "query"
          }
        ]
      },
      "patch": {
        "summary": "Update integration",
        "operationId": "integration-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Integration"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationReq"
              }
            }
          }
        },
        "description": "Update integration"
      },
      "delete": {
        "summary": "Delete integration",
        "operationId": "integration-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Integration"
        ],
        "description": "Delete integration"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "integrationId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v2/workspaces/{workspaceId}/remote-fetch": {
      "post": {
        "summary": "Remote Fetch",
        "operationId": "remote-fetch",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Workspace"
        ],
        "description": "Remote Fetch",
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "name": "workspaceId",
            "in": "path",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string"
                  },
                  "method": {
                    "type": "string",
                    "enum": [
                      "GET",
                      "POST",
                      "PUT",
                      "DELETE"
                    ]
                  },
                  "headers": {
                    "schema": {
                      "type": "object"
                    }
                  },
                  "body": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/meta/user/delete": {
      "delete": {
        "summary": "Delete user",
        "operationId": "user-delete",
        "responses": {
          "200": {}
        },
        "tags": [
          "User"
        ],
        "description": "Delete User"
      },
      "parameters": [
        {
          "schema": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              }
            ]
          },
          "name": "dry",
          "in": "query",
          "required": false
        }
      ]
    },
    "/api/v2/meta/bases/{baseId}/schema": {
      "get": {
        "summary": "Get Base Schema",
        "description": "Get the complete base schema",
        "operationId": "base-schema",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Base"
        ]
      }
    },
    "/api/v2/meta/bases/{baseId}/snapshots": {
      "get": {
        "summary": "List snapshots",
        "description": "List snapshots for a given base",
        "operationId": "snapshot-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Snapshot"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Snapshot"
        ]
      },
      "post": {
        "summary": "Create snapshot",
        "description": "Create snapshot for a given base",
        "operationId": "snapshot-create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "Name of the snapshot"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snapshot"
                }
              }
            }
          }
        },
        "tags": [
          "Snapshot"
        ]
      }
    },
    "/api/v2/meta/bases/{baseId}/snapshots/{snapshotId}/restore": {
      "post": {
        "summary": "Restore snapshot",
        "description": "Restore snapshot for a given base",
        "operationId": "snapshot-restore",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "workspaceId": {
                    "type": "string",
                    "description": "ID of the workspace where to restore"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Snapshot"
        ]
      }
    },
    "/api/v2/meta/bases/{baseId}/snapshots/{snapshotId}": {
      "delete": {
        "summary": "Delete snapshot",
        "description": "Delete snapshot for a given base",
        "operationId": "snapshot-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Snapshot"
        ]
      },
      "patch": {
        "summary": "Update snapshot",
        "description": "Update snapshot for a given base",
        "operationId": "snapshot-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Snapshot"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Snapshot"
              }
            }
          }
        }
      }
    },
    "/api/v2/meta/custom-url/get-by-id/{id}": {
      "get": {
        "summary": "Get custom url object from id",
        "operationId": "get-by-id",
        "description": "Get custom url object from id",
        "tags": [
          "CustomUrl",
          "Internal"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/CustomUrl"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "id",
          "in": "path",
          "required": true,
          "description": "Custom url"
        },
        {
          "$ref": "#/components/parameters/xc-token"
        }
      ]
    },
    "/api/v2/meta/custom-url/{customPath}": {
      "get": {
        "summary": "Get original path from custom url path",
        "operationId": "get-original-path",
        "description": "Get original path from custom url path",
        "tags": [
          "CustomUrl",
          "Internal"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "Example 1": {
                    "value": "nc/form/957b3e5b-c7fe-4805-bdb2-e4048e974f62"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "customPath",
          "in": "path",
          "required": true,
          "description": "Custom url path"
        },
        {
          "$ref": "#/components/parameters/xc-token"
        }
      ]
    },
    "/api/v2/meta/custom-url/check-path": {
      "post": {
        "summary": "Check custom url path availability",
        "operationId": "check-availability",
        "description": "Check custom url path availability",
        "tags": [
          "CustomUrl",
          "Internal"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "custom_path": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {},
                "examples": {
                  "Example 1": {
                    "value": true
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-token"
          }
        ]
      }
    },
    "/api/v1/db/meta/row-color-conditions/{rowColorConditionId}/filters": {
      "post": {
        "summary": "Create a filter for a row color condition",
        "operationId": "rowColorConditionsFilterCreate",
        "tags": [
          "Row Color Conditions"
        ],
        "parameters": [
          {
            "schema": {
              "$ref": "#/components/schemas/Id",
              "example": "rcc_123xyz"
            },
            "name": "rowColorConditionId",
            "in": "path",
            "required": true,
            "description": "ID of the row color condition"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterReq"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ProjectReq": {
        "description": "Model for Base Request",
        "examples": [
          {
            "sources": [
              {
                "alias": "My Source",
                "config": null,
                "inflection_column": "camelize",
                "inflection_table": "camelize",
                "is_meta": true,
                "type": "mysql"
              }
            ],
            "color": "#24716E",
            "description": "This is my base description",
            "title": "My Base"
          }
        ],
        "properties": {
          "sources": {
            "description": "Array of Bases",
            "items": {
              "$ref": "#/components/schemas/BaseReq"
            },
            "type": "array"
          },
          "color": {
            "description": "Primary Theme Color",
            "example": "#24716E",
            "maxLength": 50,
            "type": "string"
          },
          "description": {
            "description": "Base Description",
            "example": "This is my base description",
            "type": "string"
          },
          "title": {
            "description": "Base Title",
            "example": "My Base",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Base Status",
            "example": "locked"
          },
          "type": {
            "type": "string",
            "enum": [
              "database",
              "documentation",
              "dashboard"
            ]
          },
          "linked_db_project_ids": {
            "description": "List of Linked Database Base IDs (only used for Dashboard Projects so far)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/Meta",
            "description": "Base Meta"
          },
          "default_role": {
            "description": "Default role for the users from Workspace",
            "type": "string",
            "enum": [
              "no-access"
            ]
          }
        },
        "required": [
          "title"
        ],
        "title": "Base Request Model",
        "type": "object",
        "x-stoplight": {
          "id": "f5k929rrvfy92"
        }
      },
      "ProjectUpdateReq": {
        "description": "Model for Base Update Request",
        "x-stoplight": {
          "id": "0fq3a94qjgb5f"
        },
        "examples": [
          {
            "color": "#24716E",
            "meta": null,
            "title": "My Base",
            "order": 1
          }
        ],
        "title": "Base Update Request Model",
        "type": "object",
        "properties": {
          "color": {
            "description": "Primary Theme Color",
            "example": "#24716E",
            "maxLength": 50,
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta",
            "description": "Base Meta",
            "x-stoplight": {
              "id": "m05w9sbwqgul3"
            }
          },
          "title": {
            "description": "Base Title",
            "example": "My Base",
            "maxLength": 128,
            "minLength": 1,
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Base Status",
            "example": "locked"
          },
          "linked_db_project_ids": {
            "description": "List of Linked Database Base IDs (only used for Dashboard Projects so far)",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "order": {
            "type": "number",
            "description": "The order of the list of projects.",
            "example": 1,
            "minimum": 0
          },
          "default_role": {
            "description": "Default role for the users from Workspace",
            "type": "string",
            "enum": [
              "no-access"
            ]
          }
        }
      },
      "Cowriter": {
        "description": "Cowriter Model",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "fk_model_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_read": {
            "type": "boolean"
          },
          "meta": {},
          "output": {
            "type": "string"
          },
          "prompt_statement": {
            "type": "string"
          },
          "prompt_statement_template": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "title": "Cowriter",
        "type": "object",
        "x-stoplight": {
          "id": "9oec4p6dooeyw"
        }
      },
      "CowriterList": {
        "properties": {
          "list": {
            "items": {
              "$ref": "#/components/schemas/Cowriter"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated"
          }
        },
        "title": "Cowriter List",
        "type": "object",
        "x-stoplight": {
          "id": "24eab7d1ead43"
        }
      },
      "GeoLocation": {
        "description": "Model for Geo Location",
        "examples": [
          {
            "latitude": 18.52139,
            "longitude": 179.87295
          }
        ],
        "properties": {
          "latitude": {
            "description": "The latitude of the location",
            "example": 18.52139,
            "exclusiveMaximum": 90,
            "exclusiveMinimum": -90,
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "The longitude of the location",
            "example": 179.87295,
            "exclusiveMaximum": 180,
            "exclusiveMinimum": -180,
            "format": "double",
            "type": "number"
          }
        },
        "title": "Geo Location Model",
        "type": "object",
        "x-stoplight": {
          "id": "jv0zkileq99er"
        }
      },
      "Map": {
        "description": "Model for Map",
        "examples": [
          {
            "source_id": "ds_g4ccx6e77h1dmi",
            "columns": [
              {
                "source_id": "ds_g4ccx6e77h1dmi",
                "fk_column_id": "cl_8iw2o4ejzvdyna",
                "fk_view_id": "vw_qjt7klod1p9kyv",
                "id": "nc_46xcacqn4rc9xf",
                "order": 1,
                "base_id": "p_xm3thidrblw4n7",
                "show": 1
              }
            ],
            "fk_geo_data_col_id": "cl_8iw2o4ejzvdyna",
            "fk_view_id": "vw_qjt7klod1p9kyv",
            "meta": {},
            "order": 0,
            "base_id": "p_xm3thidrblw4n7",
            "show": true,
            "title": "My Map"
          }
        ],
        "properties": {
          "source_id": {
            "description": "The ID of the source that this view belongs to",
            "example": "ds_g4ccx6e77h1dmi",
            "type": "string"
          },
          "columns": {
            "description": "Columns in this view",
            "items": {
              "$ref": "#/components/schemas/MapColumn"
            },
            "type": "array"
          },
          "fk_geo_data_col_id": {
            "description": "Foreign Key to GeoData Column",
            "example": "cl_8iw2o4ejzvdyna",
            "type": "string"
          },
          "fk_view_id": {
            "description": "Unique ID for Map",
            "example": "vw_qjt7klod1p9kyv",
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta",
            "description": "Meta data for this view"
          },
          "order": {
            "description": "The order of the map list",
            "type": "number"
          },
          "base_id": {
            "description": "The ID of the base that this view belongs to",
            "example": "p_xm3thidrblw4n7",
            "type": "string"
          },
          "show": {
            "description": "To show this Map or not",
            "type": "boolean"
          },
          "title": {
            "description": "Title of Map View",
            "example": "My Map",
            "type": "string"
          }
        },
        "title": "Map Model",
        "type": "object",
        "x-stoplight": {
          "id": "bg6hvpyk90f0p"
        }
      },
      "MapUpdateReq": {
        "description": "Model for Map",
        "x-stoplight": {
          "id": "2me98w8ot1e6o"
        },
        "examples": [
          {
            "fk_geo_data_col_id": "cl_8iw2o4ejzvdyna",
            "meta": null
          }
        ],
        "title": "Map View Update Request Model",
        "type": "object",
        "properties": {
          "fk_geo_data_col_id": {
            "description": "Foreign Key to GeoData Column",
            "example": "cl_8iw2o4ejzvdyna",
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta",
            "description": "Meta data for this view"
          }
        }
      },
      "MapColumn": {
        "description": "Model for Map Column",
        "examples": [
          {
            "source_id": "ds_g4ccx6e77h1dmi",
            "fk_column_id": "cl_8iw2o4ejzvdyna",
            "fk_view_id": "vw_qjt7klod1p9kyv",
            "id": "nc_46xcacqn4rc9xf",
            "order": 1,
            "base_id": "p_xm3thidrblw4n7",
            "show": 1
          }
        ],
        "properties": {
          "source_id": {
            "description": "The ID of the source that this map column belongs to",
            "example": "ds_g4ccx6e77h1dmi",
            "type": "string"
          },
          "fk_column_id": {
            "description": "Foreign Key to Column",
            "example": "cl_8iw2o4ejzvdyna",
            "type": "string"
          },
          "fk_view_id": {
            "description": "Foreign Key to View",
            "example": "vw_qjt7klod1p9kyv",
            "type": "string"
          },
          "id": {
            "description": "Unique ID of Map Column",
            "example": "nc_46xcacqn4rc9xf",
            "type": "string"
          },
          "order": {
            "description": "the order in the list of map columns",
            "example": 1,
            "type": "number"
          },
          "base_id": {
            "description": "The ID of the base that this map column belongs to",
            "example": "p_xm3thidrblw4n7",
            "type": "string"
          },
          "show": {
            "description": "Whether to show this column or not",
            "example": 1,
            "type": "number"
          }
        },
        "title": "Map Column Model",
        "type": "object",
        "x-stoplight": {
          "id": "01nfqgzhqlqoe"
        }
      },
      "Webhook": {
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "title": "Webhook",
        "type": "object"
      },
      "Workspace": {
        "properties": {
          "created_at": {},
          "deleted": {
            "type": "boolean"
          },
          "deleted_at": {},
          "description": {
            "type": "string"
          },
          "fk_user_id": {
            "type": "string"
          },
          "fk_org_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "meta": {},
          "order": {
            "type": "number"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {},
          "stripe_customer_id": {
            "description": "Stripe customer ID",
            "type": "string"
          },
          "sso_only_access": {
            "description": "SSO only access",
            "type": "boolean"
          },
          "loyal": {
            "description": "Loyalty status",
            "type": "boolean"
          },
          "loyalty_discount_used": {
            "description": "Loyalty discount used",
            "type": "boolean"
          }
        },
        "title": "Workspace",
        "type": "object"
      },
      "WorkspaceList": {
        "description": "",
        "properties": {
          "list": {
            "items": {
              "$ref": "#/components/schemas/Workspace"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated"
          }
        },
        "type": "object"
      },
      "WorkspaceUser": {
        "description": "",
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          },
          "fk_user_id": {
            "type": "string"
          },
          "invite_accepted": {
            "type": "boolean"
          },
          "invite_token": {
            "type": "string"
          },
          "roles": {
            "type": "string"
          }
        },
        "title": "Workspace User",
        "type": "object",
        "x-internal": false
      },
      "WorkspaceUserInvite": {
        "description": "",
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          },
          "roles": {
            "type": "string"
          }
        },
        "title": "Workspace User Invite",
        "type": "object",
        "x-internal": false
      },
      "WorkspaceUserList": {
        "description": "",
        "properties": {
          "list": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceUser"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated"
          }
        },
        "type": "object"
      },
      "ProjectInviteEvent": {
        "type": "object",
        "properties": {
          "fk_user_id": {
            "type": "string",
            "description": "The ID of the user who receives the base invite"
          },
          "type": {
            "type": "string",
            "description": "The type of event, which should be set to 'PROJECT_INVITE'"
          },
          "body": {
            "type": "object",
            "properties": {
              "workspace": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Workspace being invited to"
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the Workspace being invited to"
                  }
                },
                "required": [
                  "id",
                  "title"
                ]
              },
              "base": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the base being invited to"
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the base being invited to"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the base being invited to"
                  }
                },
                "required": [
                  "id",
                  "title",
                  "type"
                ],
                "description": "The base being invited to"
              },
              "user": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the user who invited to the base"
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address of the user who invited to the base"
                  },
                  "display_name": {
                    "type": "string",
                    "description": "The display name of the user who invited to the base"
                  },
                  "meta": {
                    "$ref": "#/components/schemas/Meta",
                    "description": "Meta data for user"
                  }
                },
                "required": [
                  "id",
                  "email"
                ]
              }
            },
            "required": [
              "base",
              "user",
              "workspace"
            ]
          }
        },
        "required": [
          "fk_user_id",
          "type",
          "body"
        ]
      },
      "WorkspaceInviteEvent": {
        "type": "object",
        "properties": {
          "fk_user_id": {
            "type": "string",
            "description": "The ID of the user who receives the workspace invite"
          },
          "type": {
            "type": "string",
            "description": "The type of event, which should be set to 'WORKSPACE_INVITE'"
          },
          "body": {
            "type": "object",
            "properties": {
              "workspace": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Workspace being invited to"
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the Workspace being invited to"
                  }
                },
                "required": [
                  "id",
                  "title"
                ]
              },
              "user": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the user who invited to the base"
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address of the user who invited to the base"
                  },
                  "display_name": {
                    "type": "string",
                    "description": "The display name of the user who invited to the base"
                  },
                  "meta": {
                    "$ref": "#/components/schemas/Meta",
                    "description": "Meta data for user"
                  }
                },
                "required": [
                  "id",
                  "email"
                ]
              }
            },
            "required": [
              "user",
              "workspace"
            ]
          }
        },
        "required": [
          "fk_user_id",
          "type",
          "body"
        ]
      },
      "MentionEvent": {
        "type": "object",
        "properties": {
          "fk_user_id": {
            "type": "string",
            "description": "The ID of the user who receives the mention"
          },
          "type": {
            "type": "string",
            "description": "The type of event, which should be set to 'MENTION'"
          },
          "body": {
            "type": "object",
            "properties": {
              "workspace": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Workspace"
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the Workspace"
                  }
                },
                "required": [
                  "id",
                  "title"
                ]
              },
              "base": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Base"
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the Base"
                  },
                  "type": {
                    "type": "string",
                    "description": "The type of the Base"
                  }
                },
                "required": [
                  "id",
                  "title",
                  "type"
                ]
              },
              "table": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Table"
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the Table"
                  }
                },
                "required": [
                  "id",
                  "title"
                ]
              },
              "comment": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Comment"
                  },
                  "comment": {
                    "type": "string",
                    "description": "The content of the Comment"
                  }
                },
                "required": [
                  "id",
                  "comment"
                ]
              },
              "row": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Row"
                  },
                  "value": {
                    "type": "string",
                    "description": "The Display Value of the Row"
                  },
                  "column": {
                    "type": "object"
                  }
                },
                "required": [
                  "id"
                ]
              },
              "column": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the Column"
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the Column"
                  }
                },
                "required": [
                  "id",
                  "title"
                ]
              },
              "user": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the user who mentioned"
                  },
                  "email": {
                    "type": "string",
                    "description": "The email address of the user who mentioned"
                  },
                  "display_name": {
                    "type": "string",
                    "description": "The display name of the user who mentioned"
                  },
                  "meta": {
                    "$ref": "#/components/schemas/Meta",
                    "description": "Meta data for user"
                  }
                },
                "required": [
                  "id",
                  "email"
                ]
              }
            },
            "required": [
              "user",
              "workspace",
              "comment",
              "table",
              "base",
              "row"
            ]
          }
        },
        "required": [
          "fk_user_id",
          "type",
          "body"
        ]
      },
      "Filter": {
        "description": "Model for Filter",
        "examples": [
          {
            "source_id": "ds_g4ccx6e77h1dmi",
            "comparison_op": "eq",
            "comparison_sub_op": null,
            "created_at": "2023-03-02 18:18:05",
            "fk_parent_column_id": "cd_d7ah9n2qfupgys",
            "fk_column_id": "cl_d7ah9n2qfupgys",
            "fk_hook_id": null,
            "fk_parent_id": null,
            "fk_view_id": "vw_b739e29vqmrxnf",
            "id": "fi_xn647tpmdq8fu8",
            "is_group": null,
            "logical_op": "and",
            "order": 1,
            "base_id": "p_xm3thidrblw4n7",
            "updated_at": "2023-03-02 18:18:05",
            "value": "foo"
          }
        ],
        "properties": {
          "source_id": {
            "description": "Unqiue Source ID",
            "readOnly": true,
            "type": "string"
          },
          "children": {
            "description": "Children filters. Available when the filter is grouped.",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "type": "array"
          },
          "comparison_op": {
            "description": "Comparison Operator",
            "anyOf": [
              {
                "enum": [
                  "allof",
                  "anyof",
                  "blank",
                  "btw",
                  "checked",
                  "empty",
                  "eq",
                  "ge",
                  "gt",
                  "gte",
                  "in",
                  "is",
                  "isWithin",
                  "isnot",
                  "le",
                  "like",
                  "lt",
                  "lte",
                  "nallof",
                  "nanyof",
                  "nbtw",
                  "neq",
                  "nlike",
                  "not",
                  "notblank",
                  "notchecked",
                  "notempty",
                  "notnull",
                  "null"
                ],
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "comparison_sub_op": {
            "anyOf": [
              {
                "enum": [
                  "daysAgo",
                  "daysFromNow",
                  "exactDate",
                  "nextMonth",
                  "nextNumberOfDays",
                  "nextWeek",
                  "nextYear",
                  "oneMonthAgo",
                  "oneMonthFromNow",
                  "oneWeekAgo",
                  "oneWeekFromNow",
                  "pastMonth",
                  "pastNumberOfDays",
                  "pastWeek",
                  "pastYear",
                  "today",
                  "tomorrow",
                  "yesterday"
                ],
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Comparison Sub-Operator"
          },
          "fk_parent_column_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Foreign Key to parent column"
          },
          "fk_column_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Foreign Key to Column"
          },
          "fk_hook_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Foreign Key to Hook"
          },
          "fk_link_col_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Foreign Key to Link column"
          },
          "fk_model_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Foreign Key to Model"
          },
          "fk_parent_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Foreign Key to parent group."
          },
          "fk_view_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Foreign Key to View"
          },
          "fk_row_color_condition_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Foreign Key to row color conditions"
          },
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "Unique ID"
          },
          "is_group": {
            "description": "Is this filter grouped?",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "logical_op": {
            "description": "Logical Operator",
            "enum": [
              "and",
              "not",
              "or"
            ],
            "type": "string"
          },
          "base_id": {
            "description": "Unique Base ID",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "The filter value. Can be NULL for some operators."
          },
          "order": {
            "type": "number",
            "description": "The order of the filter",
            "example": 1
          }
        },
        "readOnly": true,
        "title": "Filter Model",
        "type": "object",
        "x-stoplight": {
          "id": "txz3lsqh1rbsu"
        }
      },
      "FilterList": {
        "description": "Model for Filter List",
        "examples": [
          {
            "list": [
              {
                "source_id": "ds_g4ccx6e77h1dmi",
                "comparison_op": "eq",
                "comparison_sub_op": null,
                "created_at": "2023-03-02 18:18:05",
                "fk_column_id": "cl_d7ah9n2qfupgys",
                "fk_hook_id": null,
                "fk_parent_id": null,
                "fk_view_id": "vw_b739e29vqmrxnf",
                "id": "fi_xn647tpmdq8fu8",
                "is_group": null,
                "logical_op": "and",
                "order": 1,
                "base_id": "p_xm3thidrblw4n7",
                "updated_at": "2023-03-02 18:18:05",
                "value": "foo"
              }
            ],
            "pageInfo": {
              "isFirstPage": true,
              "isLastPage": true,
              "page": 1,
              "pageSize": 10,
              "totalRows": 1
            }
          }
        ],
        "title": "Filter List Model",
        "type": "object",
        "x-examples": {
          "example-1": {
            "sources": {
              "list": [
                {
                  "alias": "string",
                  "database": "string",
                  "host": "string",
                  "id": "string",
                  "params": "string",
                  "password": "string",
                  "port": 0,
                  "base_id": "string",
                  "ssl": "string",
                  "type": "string",
                  "url": "string",
                  "username": "string"
                }
              ],
              "pageInfo": {
                "isFirstPage": true,
                "isLastPage": true,
                "pageSize": 0,
                "sort": "string",
                "totalRows": 0
              }
            }
          }
        },
        "properties": {
          "list": {
            "type": "array",
            "x-stoplight": {
              "id": "22sgv37ve9kxo"
            },
            "description": "List of filter objects",
            "items": {
              "$ref": "#/components/schemas/Filter",
              "x-stoplight": {
                "id": "ttw5rxhy83k8p"
              }
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated",
            "x-stoplight": {
              "id": "7cyrb1770mrzz"
            }
          }
        },
        "required": [
          "list",
          "pageInfo"
        ],
        "x-stoplight": {
          "id": "wbc42cyev1qzt"
        }
      },
      "Notification": {
        "allOf": [
          {
            "description": "",
            "properties": {
              "id": {
                "$ref": "#/components/schemas/Id",
                "description": "Unique ID"
              },
              "is_read": {
                "type": "boolean",
                "description": "Whether the notification has been read by the user"
              },
              "is_deleted": {
                "type": "boolean",
                "description": "Whether the notification has been deleted by the user"
              },
              "type": {
                "type": "string",
                "description": "Type of notification"
              },
              "updated_at": {},
              "created_at": {}
            },
            "title": "Notification",
            "type": "object"
          },
          {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ProjectInviteEvent"
              },
              {
                "$ref": "#/components/schemas/WorkspaceInviteEvent"
              },
              {
                "$ref": "#/components/schemas/WelcomeEvent"
              },
              {
                "$ref": "#/components/schemas/MentionEvent"
              }
            ]
          }
        ]
      },
      "CalendarRange": {
        "description": "Model for Calendar Date Range",
        "examples": [
          {
            "id": "kvc_2skkg5mi1eb37f",
            "fk_from_column_id": "cl_hzos4ghyncqi4k",
            "fk_to_column_id": "cl_hzos4ghyncqi4k",
            "fk_view_id": "vw_wqs4zheuo5lgdy",
            "label": "string"
          }
        ],
        "title": "Calendar Date Range Model",
        "type": "object",
        "properties": {
          "fk_from_column_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Foreign Key to Column"
          },
          "fk_to_column_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Foreign Key to Column"
          },
          "fk_view_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "x-stoplight": {
              "id": "t1fy4zy561ih8"
            },
            "description": "Foreign Key to View"
          },
          "label": {
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Base ID",
            "type": "string"
          }
        },
        "x-stoplight": {
          "id": "psbv6c6y9qvbu"
        }
      },
      "SSOClientReq": {
        "$ref": "#/components/schemas/SSOClient",
        "required": [
          "title",
          "type"
        ]
      },
      "Script": {
        "description": "Model for Script",
        "title": "Script Model",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID"
          },
          "title": {
            "type": "string",
            "description": "Title of the Script"
          },
          "description": {
            "type": "string",
            "description": "Description of the Script"
          },
          "meta": {
            "type": "object",
            "description": "Meta data for the Script"
          },
          "config": {
            "type": "object",
            "description": "Config for the Script"
          },
          "order": {
            "type": "number",
            "description": "Order of the Script"
          },
          "base_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Base ID",
            "x-stoplight": {
              "id": "2drg88fmodf3v"
            }
          },
          "fk_workspace_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Workspace ID",
            "x-stoplight": {
              "id": "2drg88fmodf3v"
            }
          },
          "created_by": {
            "$ref": "#/components/schemas/Id",
            "description": "User ID of the creator"
          },
          "script": {
            "type": "string",
            "description": "Code of the script"
          },
          "updated_at": {
            "type": "string",
            "description": "Last updated time"
          },
          "created_at": {
            "type": "string",
            "description": "Creation time"
          }
        },
        "x-stoplight": {
          "id": "4zvzrppfjxrqb"
        }
      },
      "SSOClient": {
        "description": "Model for SSO Client",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID"
          },
          "title": {
            "type": "string",
            "description": "Name of the SSO Client"
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the SSO Client is enabled"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether the SSO Client is deleted or not"
          },
          "type": {
            "type": "string",
            "description": "Type of SSO Client",
            "enum": [
              "saml",
              "oidc",
              "google"
            ]
          },
          "config": {
            "description": "SSO Client Configuration",
            "anyOf": [
              {
                "$ref": "#/components/schemas/SAMLClientConfig"
              },
              {
                "$ref": "#/components/schemas/OpenIDClientConfig"
              },
              {
                "$ref": "#/components/schemas/GoogleClientConfig"
              }
            ]
          }
        }
      },
      "OpenIDClientConfig": {
        "description": "OpenID Configuration",
        "type": "object",
        "properties": {
          "issuer": {
            "type": "string",
            "format": "uri"
          },
          "clientId": {
            "type": "string"
          },
          "authUrl": {
            "type": "string",
            "format": "uri"
          },
          "clientSecret": {
            "type": "string"
          },
          "tokenUrl": {
            "type": "string",
            "format": "uri"
          },
          "userInfoUrl": {
            "type": "string",
            "format": "uri"
          },
          "jwkUrl": {
            "type": "string",
            "format": "uri"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userNameAttribute": {
            "type": "string"
          }
        },
        "required": [
          "clientId",
          "authUrl",
          "clientSecret",
          "tokenUrl",
          "scopes"
        ]
      },
      "SAMLClientConfig": {
        "description": "SAML Configuration",
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string"
          },
          "metaDataUrl": {
            "type": "string"
          },
          "xml": {
            "type": "string"
          }
        },
        "anyOf": [
          {
            "required": [
              "metaDataUrl"
            ]
          },
          {
            "required": [
              "xml"
            ]
          }
        ]
      },
      "GoogleClientConfig": {
        "description": "Google Auth Configuration",
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string"
          },
          "clientSecret": {
            "type": "string"
          }
        },
        "required": [
          "clientId",
          "clientSecret"
        ]
      },
      "SSOClientList": {
        "properties": {
          "list": {
            "items": {
              "$ref": "#/components/schemas/SSOClient"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated"
          }
        },
        "title": "Cowriter List",
        "type": "object",
        "x-stoplight": {
          "id": "24eab7d1ead43"
        }
      },
      "FormColumn": {
        "description": "Model for Form Column",
        "examples": [
          {
            "id": "fvc_1m9b0aub791d4m",
            "description": null,
            "fk_column_id": "cl_ah9zavkn25ihyd",
            "fk_view_id": "vw_6fqln9vdytdv8q",
            "help": "This is a help text",
            "label": "Form Label",
            "meta": null,
            "order": 1,
            "required": 0,
            "show": 0,
            "uuid": null
          }
        ],
        "title": "Form Column Model",
        "type": "object",
        "x-examples": {
          "example-1": {
            "_cn": "first_name",
            "alias": "first_name",
            "created_at": "2022-02-15 12:39:04",
            "description": "dsdsdsdsd",
            "fk_column_id": "cl_yvyhsl9u81tokc",
            "fk_view_id": "vw_s1pf4umdnikoyn",
            "help": null,
            "id": "fvc_8z1i7t8aswkqxx",
            "label": "dsdsds",
            "order": 1,
            "required": false,
            "show": 1,
            "enable_scanner": true,
            "updated_at": "2022-02-15 12:39:16",
            "uuid": null
          }
        },
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "Unique ID"
          },
          "description": {
            "$ref": "#/components/schemas/TextOrNull",
            "description": "Form Column Description"
          },
          "fk_column_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Foreign Key to Column"
          },
          "fk_view_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Foreign Key to View"
          },
          "help": {
            "$ref": "#/components/schemas/TextOrNull",
            "description": "Form Column Help Text (Not in use)"
          },
          "label": {
            "$ref": "#/components/schemas/TextOrNull",
            "description": "Form Column Label"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta",
            "description": "Meta Info"
          },
          "order": {
            "type": "number",
            "description": "The order among all the columns in the form",
            "example": 1
          },
          "required": {
            "$ref": "#/components/schemas/Bool",
            "description": "Is this form column required in submission?"
          },
          "show": {
            "$ref": "#/components/schemas/Bool",
            "description": "Is this column shown in Form?"
          },
          "enable_scanner": {
            "$ref": "#/components/schemas/Bool",
            "description": "Indicates whether the 'Fill by scan' button is visible for this column or not.",
            "example": true
          },
          "uuid": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Form Column UUID (Not in use)"
          }
        },
        "x-stoplight": {
          "id": "rs2uh5opf10q6"
        }
      },
      "FormColumnReq": {
        "description": "Model for Form Column Request",
        "examples": [
          {
            "description": null,
            "help": "This is a help text",
            "label": "Form Label",
            "meta": null,
            "order": 1,
            "required": 0,
            "show": 0
          }
        ],
        "title": "Form Column Request Model",
        "type": "object",
        "x-examples": {
          "example-1": {
            "_cn": "first_name",
            "alias": "first_name",
            "created_at": "2022-02-15 12:39:04",
            "description": "dsdsdsdsd",
            "fk_column_id": "cl_yvyhsl9u81tokc",
            "fk_view_id": "vw_s1pf4umdnikoyn",
            "help": null,
            "id": "fvc_8z1i7t8aswkqxx",
            "label": "dsdsds",
            "order": 1,
            "required": false,
            "show": 1,
            "updated_at": "2022-02-15 12:39:16",
            "uuid": null
          }
        },
        "properties": {
          "description": {
            "$ref": "#/components/schemas/TextOrNull",
            "description": "Form Column Description"
          },
          "help": {
            "$ref": "#/components/schemas/TextOrNull",
            "description": "Form Column Help Text (Not in use)"
          },
          "label": {
            "$ref": "#/components/schemas/TextOrNull",
            "description": "Form Column Label"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta",
            "description": "Meta Info"
          },
          "order": {
            "type": "number",
            "description": "The order among all the columns in the form"
          },
          "required": {
            "$ref": "#/components/schemas/Bool",
            "description": "Is this form column required in submission?"
          },
          "show": {
            "$ref": "#/components/schemas/Bool",
            "description": "Is this column shown in Form?"
          }
        },
        "x-stoplight": {
          "id": "a1vgymjna1ose"
        }
      },
      "GalleryColumn": {
        "description": "Model for Gallery Column",
        "examples": [
          {
            "fk_col_id": "string",
            "fk_gallery_id": "string",
            "help": "string",
            "id": "string",
            "label": "string"
          }
        ],
        "properties": {
          "fk_col_id": {
            "type": "string"
          },
          "fk_gallery_id": {
            "type": "string"
          },
          "help": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "Unique ID"
          },
          "label": {
            "type": "string"
          }
        },
        "title": "Gallery Column Model",
        "type": "object",
        "x-stoplight": {
          "id": "auloy6128iwh9"
        }
      },
      "GridColumn": {
        "description": "Model for Grid Column",
        "examples": [
          {
            "id": "nc_c8jz4kxe6xvh11",
            "fk_view_id": "vw_p2jcatxz4mvcfw",
            "fk_column_id": "cl_c5knoi4xs4sfpt",
            "base_id": "p_xm3thidrblw4n7",
            "source_id": "ds_g4ccx6e77h1dmi",
            "show": 0,
            "order": 1,
            "width": "200px",
            "help": null,
            "group_by": 0,
            "group_by_order": null,
            "group_by_sort": null,
            "aggregation": "sum"
          }
        ],
        "title": "Grid Column Model",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "Unique ID",
            "x-stoplight": {
              "id": "jc14yojp52rqj"
            }
          },
          "fk_view_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Foreign Key to View",
            "x-stoplight": {
              "id": "vl18dbt5c2r8r"
            }
          },
          "fk_column_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Foreign Key to Column",
            "x-stoplight": {
              "id": "2drg88fmodf3v"
            }
          },
          "base_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Base ID",
            "x-stoplight": {
              "id": "2drg88fmodf3v"
            }
          },
          "source_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Source ID",
            "x-stoplight": {
              "id": "2drg88fmodf3v"
            }
          },
          "show": {
            "$ref": "#/components/schemas/Bool",
            "x-stoplight": {
              "id": "d47eer13oa8yr"
            }
          },
          "order": {
            "type": "number",
            "x-stoplight": {
              "id": "d47eer13oa8yr"
            },
            "example": 1,
            "description": "Grid Column Order"
          },
          "width": {
            "type": "string",
            "description": "Column Width",
            "example": "200px"
          },
          "help": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Column Help Text",
            "x-stoplight": {
              "id": "azwh6zn37qzkc"
            }
          },
          "group_by": {
            "$ref": "#/components/schemas/Bool",
            "description": "Group By"
          },
          "group_by_order": {
            "type": "number",
            "description": "Group By Order",
            "example": 1
          },
          "group_by_sort": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Group By Sort",
            "example": "asc"
          },
          "aggregation": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Aggregation",
            "example": "sum"
          }
        },
        "x-stoplight": {
          "id": "195gzd7s6p7nv"
        }
      },
      "GridColumnReq": {
        "description": "Model for Grid Column Request",
        "examples": [
          {
            "fk_column_id": "cl_c5knoi4xs4sfpt",
            "label": "My Column",
            "width": "200px"
          }
        ],
        "properties": {
          "fk_column_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Foreign Key to Column"
          },
          "help": {
            "maxLength": 255,
            "type": "string"
          },
          "label": {
            "description": "The label of the column",
            "example": "My Column",
            "maxLength": 255,
            "type": "string"
          },
          "width": {
            "description": "The width of the column",
            "example": "200px",
            "maxLength": 255,
            "pattern": "^[0-9]+(px|%)$",
            "type": "string"
          },
          "group_by": {
            "$ref": "#/components/schemas/Bool",
            "description": "Group By"
          },
          "group_by_order": {
            "type": "number",
            "description": "Group By Order",
            "example": 1
          },
          "group_by_sort": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Group By Sort",
            "example": "asc"
          },
          "show": {
            "$ref": "#/components/schemas/Bool",
            "description": "Show"
          },
          "order": {
            "type": "number",
            "description": "Order",
            "example": 1
          },
          "aggregation": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Aggregation",
            "example": "sum"
          }
        },
        "title": "Grid Column Request Model",
        "type": "object",
        "x-stoplight": {
          "id": "9yhalgmix6d0m"
        }
      },
      "KanbanColumn": {
        "description": "Model for Kanban Column",
        "examples": [
          {
            "id": "kvc_2skkg5mi1eb37f",
            "fk_column_id": "cl_hzos4ghyncqi4k",
            "fk_view_id": "vw_wqs4zheuo5lgdy",
            "source_id": "ds_hd4ojj0xpquaam",
            "base_id": "p_kzfl5lb0t3tcok",
            "title": "string",
            "show": 0,
            "order": "1"
          }
        ],
        "title": "Kanban Column Model",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "Unique ID"
          },
          "fk_column_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Foreign Key to Column"
          },
          "fk_view_id": {
            "$ref": "#/components/schemas/Id",
            "x-stoplight": {
              "id": "t1fy4zy561ih8"
            },
            "description": "Foreign Key to View"
          },
          "source_id": {
            "$ref": "#/components/schemas/Id",
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Baes ID\n"
          },
          "base_id": {
            "$ref": "#/components/schemas/Id",
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Base ID"
          },
          "title": {
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Base ID",
            "type": "string"
          },
          "show": {
            "$ref": "#/components/schemas/Bool",
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Is this column shown?"
          },
          "order": {
            "type": "number",
            "x-stoplight": {
              "id": "pbnchzgci5dwa"
            },
            "example": 1,
            "description": "Column Order"
          }
        },
        "x-stoplight": {
          "id": "psbv6c6y9qvbu"
        }
      },
      "KanbanColumnReq": {
        "description": "Model for Kanban Column Request",
        "examples": [
          {
            "title": "string",
            "show": 0,
            "order": "1"
          }
        ],
        "title": "Kanban Column Model Request",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title"
          },
          "show": {
            "$ref": "#/components/schemas/Bool",
            "description": "Is this column shown?"
          },
          "order": {
            "type": "number",
            "example": 1,
            "description": "Column Order"
          }
        }
      },
      "GalleryColumnReq": {
        "description": "Model for Gallery Column Request",
        "examples": [
          {
            "label": "My Column",
            "width": "200px"
          }
        ],
        "properties": {
          "show": {
            "$ref": "#/components/schemas/Bool",
            "description": "Show"
          },
          "order": {
            "type": "number",
            "description": "Order",
            "example": 1
          }
        }
      },
      "ViewUpdateReq": {
        "description": "Model for View Update Request",
        "x-stoplight": {
          "id": "7inf594lhs8mh"
        },
        "examples": [
          {
            "title": "Grid View 1",
            "uuid": "e2457bbf-e29c-4fec-866e-fe3b01dba57f",
            "password": "password123",
            "lock_type": "collaborative",
            "meta": "{\"allowCSVDownload\":true}",
            "order": 1,
            "show_system_fields": 0,
            "expanded_record_mode": "attachment",
            "attachment_mode_column_id": "cl_uu1meolj00tlrq"
          }
        ],
        "title": "View Update Request Model",
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 255,
            "type": "string",
            "description": "View Title",
            "example": "Grid View 1"
          },
          "description": {
            "$ref": "#/components/schemas/TextOrNull",
            "description": "Description of the view.",
            "example": "This is a grid view."
          },
          "uuid": {
            "maxLength": 255,
            "type": "string",
            "x-stoplight": {
              "id": "vlhs7xs644u8l"
            },
            "description": "View UUID. Used in Shared View.",
            "example": "e2457bbf-e29c-4fec-866e-fe3b01dba57f"
          },
          "password": {
            "maxLength": 255,
            "type": "string",
            "x-stoplight": {
              "id": "vlhs7xs644u8l"
            },
            "description": "View Password. Used in Shared View.",
            "example": "password123"
          },
          "lock_type": {
            "enum": [
              "collaborative",
              "locked",
              "personal"
            ],
            "type": "string",
            "description": "Lock type of View.",
            "example": "collaborative"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta",
            "description": "Meta info used in View."
          },
          "order": {
            "type": "number",
            "description": "The order of the list of views.",
            "example": 1,
            "minimum": 0
          },
          "show_system_fields": {
            "$ref": "#/components/schemas/Bool",
            "description": "Should this view show system fields?"
          },
          "owned_by": {
            "$ref": "#/components/schemas/Id",
            "description": "ID of view owner user"
          },
          "expanded_record_mode": {
            "type": "string",
            "enum": [
              "field",
              "attachment",
              "discussion"
            ],
            "description": "The expanded record mode of the view",
            "example": "field"
          },
          "attachment_mode_column_id": {
            "$ref": "#/components/schemas/Id",
            "description": "ID of column used for attachment mode"
          }
        }
      },
      "CalendarColumn": {
        "description": "Model for Calendar Column",
        "examples": [
          {
            "id": "kvc_2skkg5mi1eb37f",
            "fk_column_id": "cl_hzos4ghyncqi4k",
            "fk_view_id": "vw_wqs4zheuo5lgdy",
            "source_id": "ds_hd4ojj0xpquaam",
            "base_id": "p_kzfl5lb0t3tcok",
            "title": "string",
            "show": 0,
            "bold": 0,
            "italic": 0,
            "underline": 0,
            "order": "1"
          }
        ],
        "title": "Calendar Column Model",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "Unique ID"
          },
          "fk_column_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Foreign Key to Column"
          },
          "fk_view_id": {
            "$ref": "#/components/schemas/Id",
            "x-stoplight": {
              "id": "t1fy4zy561ih8"
            },
            "description": "Foreign Key to View"
          },
          "source_id": {
            "$ref": "#/components/schemas/Id",
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Baes ID\n"
          },
          "base_id": {
            "$ref": "#/components/schemas/Id",
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Base ID"
          },
          "title": {
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Base ID",
            "type": "string"
          },
          "show": {
            "$ref": "#/components/schemas/Bool",
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Is this column shown?"
          },
          "bold": {
            "$ref": "#/components/schemas/Bool",
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Is this column shown as bold?"
          },
          "italic": {
            "$ref": "#/components/schemas/Bool",
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Is this column shown as italic?"
          },
          "underline": {
            "$ref": "#/components/schemas/Bool",
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Is this column shown underlines?"
          },
          "order": {
            "type": "number",
            "x-stoplight": {
              "id": "pbnchzgci5dwa"
            },
            "example": 1,
            "description": "Column Order"
          }
        },
        "x-stoplight": {
          "id": "psbv6c6y9qvbu"
        }
      },
      "CalendarColumnReq": {
        "description": "Model for Calendar Column Request",
        "examples": [
          {
            "title": "string",
            "show": 0,
            "bold": 0,
            "italic": 0,
            "underline": 0,
            "order": "1"
          }
        ],
        "title": "Calendar Column Model",
        "type": "object",
        "properties": {
          "show": {
            "$ref": "#/components/schemas/Bool",
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Is this column shown?"
          },
          "bold": {
            "$ref": "#/components/schemas/Bool",
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Is this column shown as bold?"
          },
          "italic": {
            "$ref": "#/components/schemas/Bool",
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Is this column shown as italic?"
          },
          "underline": {
            "$ref": "#/components/schemas/Bool",
            "x-stoplight": {
              "id": "uqq8xmyz97t1u"
            },
            "description": "Is this column shown underlines?"
          },
          "order": {
            "type": "number",
            "x-stoplight": {
              "id": "pbnchzgci5dwa"
            },
            "example": 1,
            "description": "Column Order"
          }
        },
        "x-stoplight": {
          "id": "psbv6c6y9qvbu"
        }
      },
      "Org": {
        "description": "Model for Organisation",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID"
          },
          "title": {
            "type": "string",
            "description": "Name of the SSO Client"
          },
          "meta": {
            "oneOf": [
              {
                "type": ""
              },
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "stripe_customer_id": {
            "description": "Stripe customer ID",
            "type": "string"
          }
        }
      },
      "OrgUserReq": {
        "description": "Model for Organisation User Request",
        "type": "object",
        "properties": {
          "roles": {
            "type": "string",
            "description": "Role associated to the user"
          }
        }
      },
      "OrgUser": {
        "description": "Model for Organisation User Request",
        "type": "object",
        "properties": {
          "roles": {
            "type": "string",
            "description": "Role associated to the user"
          },
          "fk_org_id": {
            "type": "string",
            "description": "Organisation ID"
          },
          "fk_user_id": {
            "type": "string",
            "description": "User ID"
          }
        }
      },
      "Domain": {
        "description": "Model for Organisation Domain name",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID"
          },
          "fk_org_id": {
            "type": "string",
            "description": "Organisation ID"
          },
          "fk_user_id": {
            "type": "string",
            "description": "User ID who added the domain"
          },
          "domain": {
            "type": "string",
            "description": "Domain name"
          },
          "txt_value": {
            "type": "string",
            "description": "TXT value for domain verification"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the domain is verified or not"
          },
          "last_verified": {
            "description": "Last verified date"
          }
        }
      },
      "DomainReq": {
        "description": "Model for Organisation Domain name",
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "Domain name"
          },
          "deleted": {
            "type": "boolean"
          }
        },
        "required": [
          "domain"
        ]
      },
      "OrgBaseList": {
        "description": "Model for Organization Base List",
        "type": "object",
        "properties": {
          "list": {
            "type": "array"
          }
        }
      },
      "OrgUserList": {
        "description": "Model for Organisation User List",
        "type": "object",
        "properties": {
          "list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgUser"
            }
          }
        }
      },
      "IntegrationList": {
        "description": "Model for Integration List",
        "examples": [
          {
            "list": [
              {
                "title": "string",
                "config": null,
                "created_at": "2023-03-01 14:27:36",
                "enabled": true,
                "id": "string",
                "order": 1,
                "type": "database",
                "sub_type": "mysql2",
                "updated_at": "2023-03-01 14:27:36"
              }
            ],
            "pageInfo": {
              "isFirstPage": true,
              "isLastPage": true,
              "page": 1,
              "pageSize": 10,
              "totalRows": 1
            }
          }
        ],
        "title": "Integration List Model",
        "type": "object",
        "x-examples": {
          "example-1": {
            "sources": {
              "list": [
                {
                  "title": "string",
                  "config": null,
                  "created_at": "2023-03-01 14:27:36",
                  "enabled": true,
                  "id": "string",
                  "order": 1,
                  "type": "database",
                  "sub_type": "mysql2",
                  "updated_at": "2023-03-01 14:27:36"
                }
              ],
              "pageInfo": {
                "isFirstPage": true,
                "isLastPage": true,
                "pageSize": 0,
                "sort": "string",
                "totalRows": 0
              }
            }
          }
        },
        "properties": {
          "list": {
            "description": "List of Integration Models",
            "minItems": 1,
            "type": "array",
            "uniqueItems": true,
            "items": {
              "$ref": "#/components/schemas/Integration"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated",
            "description": "Pagination Info"
          }
        },
        "required": [
          "list",
          "pageInfo"
        ]
      },
      "CustomUrl": {
        "description": "Model for Custom Url",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id associated to the Custom url"
          },
          "fk_workspace_id": {
            "type": "string",
            "description": "Workspace ID"
          },
          "base_id": {
            "type": "string",
            "description": "Base ID"
          },
          "fk_model_id": {
            "type": "string",
            "description": "Model ID"
          },
          "view_id": {
            "type": "string",
            "description": "View ID"
          },
          "original_path": {
            "type": "string",
            "description": "Original url used for redirection purpose"
          },
          "custom_path": {
            "type": "string",
            "description": "Custom url path"
          }
        }
      }
    }
  }
}

