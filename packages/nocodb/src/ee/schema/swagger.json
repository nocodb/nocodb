{
  "openapi": "3.1.0",
  "x-stoplight": {
    "id": "qiz1rcfqd2jy6"
  },
  "info": {
    "title": "nocodb",
    "version": "1.0",
    "description": "NocoDB API Documentation"
  },
  "x-tagGroups": [
    {
      "name": "Auth APIs",
      "tags": [
        "Auth",
        "API Token"
      ]
    },
    {
      "name": "Public APIs",
      "tags": [
        "Public"
      ]
    },
    {
      "name": "Data APIs",
      "tags": [
        "DB Table Row",
        "DB View Row",
        "Storage"
      ]
    },
    {
      "name": "Meta APIs",
      "tags": [
        "Base",
        "DB Table",
        "DB Table Column",
        "DB Table Filter",
        "DB Table Sort",
        "DB Table Webhook",
        "DB Table Webhook Filter",
        "DB View",
        "DB View Column",
        "DB View Share",
        "Plugin",
        "Project",
        "Utils"
      ]
    },
    {
      "name": "Organisation APIs",
      "tags": [
        "Org App Settings",
        "Org License",
        "Org Tokens",
        "Org Users"
      ]
    }
  ],
  "servers": [
    {
      "url": "http://localhost:8080"
    }
  ],
  "paths": {
    "/api/v1/dashboards/{dashboardId}/layouts": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "example": "p_124hhlkbeasewh",
            "type": "string"
          },
          "name": "dashboardId",
          "in": "path",
          "required": true,
          "description": "Unique Dashboard/Project ID"
        }
      ],
      "post": {
        "summary": "Create Layout",
        "operationId": "layout-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Layout"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LayoutReq"
              }
            }
          }
        },
        "tags": [
          "Dashboard"
        ],
        "description": "Create a new Layout in a given Dashboard project",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      },
      "get": {
        "summary": "List Layouts",
        "operationId": "layout-list",
        "responses": {
          "200": {
            "$ref": "#/components/responses/LayoutList"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ],
        "tags": [
          "Dashboard"
        ],
        "description": "List all Layouts in a given Dashboard project"
      }
    },
    "/api/v1/dashboards/{dashboardId}/layouts/{layoutId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "example": "us_b3xo2i44nx5y9l"
          },
          "name": "dashboardId",
          "in": "path",
          "required": true,
          "description": "Unique Dashboard ID"
        },
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "example": "us_b3xo2i44nx5y9l"
          },
          "name": "layoutId",
          "in": "path",
          "required": true,
          "description": "Unique Layout ID"
        }
      ],
      "get": {
        "summary": "Get Layout",
        "operationId": "layout-get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Layout"
                }
              }
            }
          }
        },
        "tags": [
          "Dashboard"
        ],
        "description": "Get Layout"
      },
      "delete": {
        "summary": "Delete Layout",
        "operationId": "layout-delete",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Layout"
                }
              }
            }
          }
        },
        "tags": [
          "Dashboard"
        ],
        "description": "Delete Layout"
      },
      "patch": {
        "summary": "Update Layout",
        "operationId": "layout-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Layout"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LayoutUpdateReq"
              }
            }
          }
        },
        "description": "Update the given Layout",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      }
    },
    "/api/v1/layouts/{layoutId}/widgets": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "example": "p_124hhlkbeasewh",
            "type": "string"
          },
          "name": "layoutId",
          "in": "path",
          "required": true,
          "description": "Unique Layout ID"
        }
      ],
      "get": {
        "summary": "List Widgets for Layout",
        "operationId": "widget-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WidgetList"
                }
              }
            }
          }
        },
        "tags": [
          "Dashboard"
        ],
        "description": "Get Widgets of the Layout"
      },
      "post": {
        "summary": "Create Widget",
        "operationId": "widget-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Widget"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WidgetReq"
              }
            }
          }
        },
        "tags": [
          "Dashboard"
        ],
        "description": "Create a new Widget in a given Layout",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      }
    },
    "/api/v1/layouts/{layoutId}/widgets/{widgetId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "example": "p_124hhlkbeasewh",
            "type": "string"
          },
          "name": "layoutId",
          "in": "path",
          "required": true,
          "description": "Unique Layout ID"
        },
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "example": "p_124hhlkbeasewh",
            "type": "string"
          },
          "name": "widgetId",
          "in": "path",
          "required": true,
          "description": "Widget ID"
        }
      ],
      "get": {
        "summary": "Get Widget, including its data",
        "operationId": "widget-get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Widget"
                }
              }
            }
          }
        },
        "tags": [
          "Dashboard"
        ],
        "description": "Get Layout"
      },
      "delete": {
        "summary": "Delete Widget",
        "operationId": "widget-delete",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Widget"
                }
              }
            }
          }
        },
        "tags": [
          "Dashboard"
        ],
        "description": "Delete Widget"
      },
      "patch": {
        "summary": "Update Widget",
        "operationId": "widget-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Widget"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WidgetUpdateReq"
              }
            }
          }
        },
        "description": "Update the given Widget",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      }
    },
    "/api/v1/dashboards/{dashboardId}/layouts/{layoutId}/widgets/{widgetId}/filters": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "vw_wtdg2meyig5l4q"
          },
          "name": "dashboardId",
          "in": "path",
          "required": true,
          "description": "Unique Dashboard Project ID"
        },
        {
          "schema": {
            "type": "string",
            "example": "vw_wtdg2meyig5l4q"
          },
          "name": "layoutId",
          "in": "path",
          "required": true,
          "description": "Unique Layout ID"
        },
        {
          "schema": {
            "type": "string",
            "example": "vw_wtdg2meyig5l4q"
          },
          "name": "widgetId",
          "in": "path",
          "required": true,
          "description": "Unique Widget ID"
        }
      ],
      "get": {
        "summary": "Get Widget Filter",
        "operationId": "widget-filter-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterList"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "list": [
                        {
                          "base_id": "ds_g4ccx6e77h1dmi",
                          "comparison_op": "eq",
                          "comparison_sub_op": null,
                          "created_at": "2023-03-02 18:18:05",
                          "fk_column_id": "cl_d7ah9n2qfupgys",
                          "fk_hook_id": null,
                          "fk_widget_id": "ad_943rjowiejdis",
                          "fk_parent_id": null,
                          "fk_view_id": "vw_b739e29vqmrxnf",
                          "id": "fi_xn647tpmdq8fu8",
                          "is_group": null,
                          "logical_op": "and",
                          "order": 1,
                          "project_id": "p_xm3thidrblw4n7",
                          "updated_at": "2023-03-02 18:18:05",
                          "value": "foo"
                        }
                      ],
                      "pageInfo": {
                        "isFirstPage": true,
                        "isLastPage": true,
                        "page": 1,
                        "pageSize": 10,
                        "totalRows": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "description": "Get the filter for a given Widget",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      },
      "post": {
        "summary": "Create Widget Filter",
        "operationId": "widget-filter-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "base_id": "ds_g4ccx6e77h1dmi",
                      "comparison_op": "eq",
                      "comparison_sub_op": null,
                      "created_at": "2023-03-02 18:18:05",
                      "fk_column_id": "cl_d7ah9n2qfupgys",
                      "fk_hook_id": null,
                      "fk_widget_id": "aw_t5393oijsd",
                      "fk_parent_id": null,
                      "fk_view_id": "vw_b739e29vqmrxnf",
                      "id": "fi_xn647tpmdq8fu8",
                      "is_group": null,
                      "logical_op": "and",
                      "order": 1,
                      "project_id": "p_xm3thidrblw4n7",
                      "updated_at": "2023-03-02 18:18:05",
                      "value": "foo"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "Dashboard"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterReq"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "comparison_op": "eq",
                    "comparison_sub_op": null,
                    "fk_column_id": "cl_d7ah9n2qfupgys",
                    "is_group": false,
                    "logical_op": "and",
                    "value": "foo"
                  }
                }
              }
            }
          }
        },
        "description": "Update the filter for a given Widget",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      }
    },
    "api/v1/public/docs/{projectId}/pages/{parentPageId}/nested": {
      "get": {
        "summary": "List tree of public pages of given parent page and its children. If the given parent page is published under a different parent page, the tree's top level will be that parent page",
        "operationId": "list-public-pages",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocsPage"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Noco docs"
        ],
        "description": ""
      }
    },
    "/api/v1/public/docs/{projectId}/pages/{id}": {
      "get": {
        "summary": "Get public page and its project",
        "operationId": "get-public-page-and-project",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "page": {
                      "$ref": "#/components/schemas/DocsPage"
                    },
                    "project": {
                      "$ref": "#/components/schemas/Project"
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Noco docs"
        ],
        "description": ""
      }
    },
    "/api/v1/docs/{projectId}/pages": {
      "get": {
        "summary": "List all pages",
        "operationId": "list-pages",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocsPage"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Noco docs"
        ],
        "description": "List pages"
      },
      "post": {
        "summary": "Create page",
        "operationId": "create-page",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocsPage"
                }
              }
            }
          }
        },
        "tags": [
          "Noco docs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/DocsPage"
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Create page"
      },
      "parameters": []
    },
    "/api/v1/docs/{projectId}/pages/{id}": {
      "get": {
        "summary": "Get page by id",
        "operationId": "get-page",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocsPage"
                }
              }
            }
          }
        },
        "tags": [
          "Noco docs"
        ],
        "description": "Get page"
      },
      "delete": {
        "summary": "Delete page",
        "operationId": "delete-page",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Noco docs"
        ],
        "description": "Delete page"
      },
      "put": {
        "summary": "Update page",
        "operationId": "update-page",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocsPage"
                }
              }
            }
          }
        },
        "tags": [
          "Noco docs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "attributes": {
                    "$ref": "#/components/schemas/DocsPage"
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Update page"
      }
    },
    "/api/v1/docs/{projectId}/pages/{id}/gpt": {
      "post": {
        "summary": "Returns ai suggested page content. Does not update page content.",
        "operationId": "docs-page-gpt",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "Noco docs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Text",
                    "required": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Page gpt",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Gpt type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "expand",
                "outline"
              ],
              "description": "Gpt type, expand is for expanding the page content, outline is for generating page outline"
            }
          }
        ]
      },
      "parameters": []
    },
    "/api/v1/docs/{projectId}/pages/gpt": {
      "post": {
        "summary": "Create nested pages using AI with project title. Will create and insert pages in the project",
        "operationId": "docs-gpt",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Noco docs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Prompt text",
                    "required": true
                  }
                }
              }
            }
          },
          "required": true
        }
      },
      "parameters": []
    },
    "/api/v1/docs/{projectId}/pages/import": {
      "post": {
        "summary": "Import pages",
        "operationId": "import-pages",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Noco docs"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "type": "string",
                    "description": "Github user",
                    "required": true
                  },
                  "repo": {
                    "type": "string",
                    "description": "Github repo",
                    "required": true
                  },
                  "branch": {
                    "type": "string",
                    "description": "Github branch",
                    "required": true
                  },
                  "path": {
                    "type": "string",
                    "description": "Github path",
                    "required": true
                  },
                  "type": {
                    "type": "string",
                    "required": true
                  },
                  "from": {
                    "type": "string",
                    "required": true
                  }
                }
              }
            }
          },
          "required": true
        },
        "description": "Import pages"
      },
      "parameters": []
    },
    "/api/v1/docs/{projectId}/pages/{pageId}/history/sync": {
      "post": {
        "summary": "When called will snapshot the page if there is any page change needed to be snapshoted",
        "operationId": "sync-page-history",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "properties": {
                  "hadChanges": {
                    "type": "boolean"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Noco docs"
        ],
        "description": "Sync page history"
      }
    },
    "/api/v1/docs/{projectId}/pages/{pageId}/history": {
      "get": {
        "summary": "List snapshots of the page (paginated)",
        "operationId": "list-page-history",
        "parameters": [
          {
            "name": "pageNumber",
            "in": "query",
            "description": "Page Number for pagination",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Page Size for pagination",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "snapshots": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/DocsPageSnapshot"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Noco docs"
        ]
      }
    },
    "/api/v1/docs/{projectId}/pages/{pageId}/history/{snapshotId}/restore": {
      "post": {
        "summary": "Restore page to a given snapshot",
        "operationId": "restore-page-history",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Noco docs"
        ]
      }
    },
    "/api/v1/workspaces": {
      "get": {
        "summary": "List workspaces",
        "operationId": "workspace-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceList"
                }
              }
            }
          }
        },
        "tags": [
          "Workspace"
        ],
        "description": "List workspaces"
      },
      "post": {
        "summary": "List workspaces",
        "operationId": "workspace-create",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Workspace"
                      }
                    },
                    {
                      "$ref": "#/components/schemas/Workspace"
                    }
                  ]
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Workspace"
                    }
                  },
                  {
                    "$ref": "#/components/schemas/Workspace"
                  }
                ]
              }
            }
          }
        },
        "tags": [
          "Workspace"
        ],
        "description": "List workspaces"
      },
      "parameters": []
    },
    "/api/v1/workspaces/{workspaceId}": {
      "get": {
        "summary": "Read workspace",
        "operationId": "workspace-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Workspace"
                }
              }
            }
          }
        },
        "tags": [
          "Workspace"
        ],
        "description": "Read workspace"
      },
      "patch": {
        "summary": "Update workspace",
        "operationId": "workspace-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Workspace"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Workspace"
              }
            }
          }
        },
        "description": "Update workspace"
      },
      "delete": {
        "summary": "Delete workspace",
        "operationId": "workspace-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Workspace"
        ],
        "description": "Delete workspace"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/workspaces/{workspaceId}/upgrade": {
      "post": {
        "summary": "Upgrade workspace",
        "operationId": "workspace-upgrade",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                }
              }
            }
          }
        },
        "tags": [
          "Workspace"
        ],
        "description": "Upgrade workspace"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/workspaces/{workspaceId}/users": {
      "get": {
        "summary": "Workspace users list",
        "operationId": "workspace-user-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceUserList"
                }
              }
            }
          }
        },
        "tags": [
          "Workspace user"
        ],
        "description": "Workspace users list"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/workspaces/{workspaceId}/projects": {
      "get": {
        "summary": "Workspace projects list",
        "operationId": "workspace-project-list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectList"
                }
              }
            }
          }
        },
        "tags": [
          "Workspace project"
        ],
        "description": "Workspace projects list"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/workspaces/{toWorkspaceId}/projects/{projectId}/move": {
      "post": {
        "summary": "Workspace project move",
        "operationId": "workspace-project-move",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {}
            }
          }
        },
        "tags": [
          "Workspace project"
        ],
        "description": "Workspace projects list"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "toWorkspaceId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "projectId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/workspaces/{workspaceId}/invitations": {
      "post": {
        "summary": "Workspace user invite",
        "operationId": "workspace-user-invite",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WorkspaceUserInvite"
              }
            }
          }
        },
        "tags": [
          "Workspace user"
        ],
        "description": "Workspace user invite"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/api/v1/workspaces/{workspaceId}/users/{userId}": {
      "get": {
        "summary": "Workspace user read",
        "operationId": "workspace-user-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkspaceUser"
                }
              }
            }
          }
        },
        "tags": [
          "Workspace user"
        ],
        "description": "Workspace user read"
      },
      "patch": {
        "summary": "Update workspace user",
        "operationId": "workspace-user-update",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Workspace user"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "roles": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "description": "Update workspace user"
      },
      "delete": {
        "summary": "Delete workspace user",
        "operationId": "workspace-user-delete",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Workspace User"
        ],
        "description": "Delete workspace user"
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "workspaceId",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "userId",
          "in": "path",
          "required": true
        }
      ]
    },


    "/api/v1/db/meta/filters/{filterId}": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "pattern": "fi_pgfuo11uhn2xeo"
          },
          "name": "filterId",
          "in": "path",
          "required": true,
          "description": "Unique Filter ID"
        }
      ],
      "get": {
        "summary": "Get Filter",
        "operationId": "db-table-filter-get",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Filter"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "base_id": "ds_g4ccx6e77h1dmi",
                      "comparison_op": "eq",
                      "comparison_sub_op": null,
                      "created_at": "2023-03-02 18:18:05",
                      "fk_column_id": "cl_d7ah9n2qfupgys",
                      "fk_hook_id": null,
                      "fk_widget_id": null,
                      "fk_parent_id": null,
                      "fk_view_id": "vw_b739e29vqmrxnf",
                      "id": "fi_xn647tpmdq8fu8",
                      "is_group": null,
                      "logical_op": "and",
                      "order": 1,
                      "project_id": "p_xm3thidrblw4n7",
                      "updated_at": "2023-03-02 18:18:05",
                      "value": "foo"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "description": "Get the filter data with a given Filter ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      },
      "patch": {
        "summary": "Update Filter",
        "operationId": "db-table-filter-update",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                },
                "examples": {
                  "Example 1": {
                    "value": 1
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FilterReq"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "comparison_op": "eq",
                    "comparison_sub_op": null,
                    "fk_column_id": "cl_d7ah9n2qfupgys",
                    "is_group": false,
                    "logical_op": "and",
                    "value": "foo"
                  }
                }
              }
            }
          }
        },
        "description": "Update the filter data with a given Filter ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      },
      "delete": {
        "summary": "Delete Filter",
        "operationId": "db-table-filter-delete",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                },
                "examples": {
                  "Example 1": {
                    "value": true
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "description": "Delete the filter data with a given Filter ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      }
    },
    "/api/v1/db/meta/filters/{filterGroupId}/children": {
      "parameters": [
        {
          "schema": {
            "$ref": "#/components/schemas/Id",
            "example": "fi_pgfuo11uhn2xeo",
            "description": "Filter Group ID"
          },
          "name": "filterGroupId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Filter Group Children",
        "operationId": "db-table-filter-children-read",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterList"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "list": [
                        {
                          "base_id": "ds_g4ccx6e77h1dmi",
                          "comparison_op": "eq",
                          "comparison_sub_op": null,
                          "created_at": "2023-03-02 18:18:05",
                          "fk_column_id": "cl_d7ah9n2qfupgys",
                          "fk_hook_id": null,
                          "fk_parent_id": null,
                          "fk_view_id": "vw_b739e29vqmrxnf",
                          "id": "fi_xn647tpmdq8fu8",
                          "is_group": null,
                          "logical_op": "and",
                          "order": 1,
                          "project_id": "p_xm3thidrblw4n7",
                          "updated_at": "2023-03-02 18:18:05",
                          "value": "foo"
                        }
                      ],
                      "pageInfo": {
                        "isFirstPage": true,
                        "isLastPage": true,
                        "page": 1,
                        "pageSize": 10,
                        "totalRows": 1
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "tags": [
          "DB Table Filter"
        ],
        "description": "Get Filter Group Children of a given group ID",
        "parameters": [
          {
            "$ref": "#/components/parameters/xc-auth"
          }
        ]
      }
    },
    "/api/v1/db/meta/magic": {
      "parameters": [],
      "post": {
        "summary": "Get generic response using NocoAI",
        "operationId": "utils-magic",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Utils"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "operation": {
                    "type": "string",
                    "required": true,
                    "enum": [
                      "selectOptions",
                      "predictColumnType",
                      "predictFormula",
                      "predictNextColumn",
                      "predictNextFormulas",
                      "generateSinglePrompt",
                      "generateQueryPrompt",
                      "generateSQL",
                      "repairSQL"
                    ]
                  },
                  "data": {
                    "type": "object"
                  }
                }
              }
            }
          }
        },
        "description": "Get select options using NocoAI"
      }
    },
    "/api/v1/command_palette": {
      "parameters": [],
      "post": {
        "summary": "Get command palette suggestions",
        "operationId": "utils-command-palette",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "tags": [
          "Utils"
        ],
        "requestBody": {
          "content": {
            "application/json": {}
          }
        },
        "description": "Get dynamic command palette suggestions based on scope"
      }
    }
  },
  "components": {
    "schemas": {
      "Cowriter": {
        "description": "Cowriter Model",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "created_by": {
            "type": "string"
          },
          "fk_model_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_read": {
            "type": "boolean"
          },
          "meta": {},
          "output": {
            "type": "string"
          },
          "prompt_statement": {
            "type": "string"
          },
          "prompt_statement_template": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "title": "Cowriter",
        "type": "object",
        "x-stoplight": {
          "id": "9oec4p6dooeyw"
        }
      },
      "CowriterList": {
        "properties": {
          "list": {
            "items": {
              "$ref": "#/components/schemas/Cowriter"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated"
          }
        },
        "title": "Cowriter List",
        "type": "object",
        "x-stoplight": {
          "id": "24eab7d1ead43"
        }
      },
      "DocsPage": {
        "description": "Page of Noco docs",
        "examples": [
          {
            "content": "Smith",
            "description": "Example description",
            "id": "142",
            "order": 1,
            "title": "Alice"
          }
        ],
        "properties": {
          "archived_by_id": {
            "type": "string"
          },
          "archived_date": {
            "format": "date",
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "content_html": {
            "type": "string"
          },
          "created_at": {
            "format": "date",
            "type": "string"
          },
          "created_by_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "id": {
            "description": "Unique identifier for the given page.",
            "type": "string"
          },
          "is_parent": {
            "type": "boolean"
          },
          "is_published": {
            "type": "boolean"
          },
          "nested_published_parent_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "last_published_by_id": {
            "type": "string"
          },
          "last_published_date": {
            "format": "date",
            "type": "string"
          },
          "last_updated_by_id": {
            "type": "string"
          },
          "metaJson": {
            "type": [
              "object",
              "string"
            ]
          },
          "order": {
            "type": "number"
          },
          "parent_page_id": {
            "type": "string"
          },
          "project_id": {
            "type": "string"
          },
          "published_content": {
            "type": "string"
          },
          "published_title": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {
            "format": "date",
            "type": "string"
          },
          "last_snapshot_at": {
            "format": "date",
            "type": "string"
          },
          "last_snapshot_json": {
            "type": "string",
            "required": "false"
          },
          "last_snapshot": {
            "$ref": "#/components/schemas/DocsPageSnapshot",
            "required": "false"
          }
        },
        "required": [
          "content",
          "title"
        ],
        "title": "DocsPage",
        "type": "object",
        "x-internal": false
      },
      "DocsPageSnapshot": {
        "description": "Snapshot of a DocsPage",
        "properties": {
          "id": {
            "description": "Unique identifier for the given page.",
            "type": "string"
          },
          "fk_workspace_id": {
            "type": "string"
          },
          "fk_project_id": {
            "type": "string"
          },
          "fk_page_id": {
            "type": "string"
          },
          "last_updated_by_id": {
            "type": "string"
          },
          "created_at": {
            "format": "date",
            "type": "string"
          },
          "page": {
            "$ref": "#/components/schemas/DocsPage",
            "required": "false"
          },
          "page_json": {
            "type": "string"
          },
          "diff": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "updated",
              "published",
              "unpublished",
              "restored",
              "created"
            ]
          }
        }
      },
      "Follower": {
        "properties": {
          "fk_follower_id": {
            "type": "string"
          }
        },
        "title": "Follower",
        "type": "object",
        "x-stoplight": {
          "id": "a3aza5b3wavkv"
        }
      },
      "GeoLocation": {
        "description": "Model for Geo Location",
        "examples": [
          {
            "latitude": 18.52139,
            "longitude": 179.87295
          }
        ],
        "properties": {
          "latitude": {
            "description": "The latitude of the location",
            "example": 18.52139,
            "exclusiveMaximum": 90,
            "exclusiveMinimum": -90,
            "format": "double",
            "type": "number"
          },
          "longitude": {
            "description": "The longitude of the location",
            "example": 179.87295,
            "exclusiveMaximum": 180,
            "exclusiveMinimum": -180,
            "format": "double",
            "type": "number"
          }
        },
        "title": "Geo Location Model",
        "type": "object",
        "x-stoplight": {
          "id": "jv0zkileq99er"
        }
      },
      "Widget": {
        "description": "Model for Widget",
        "title": "Widget Model",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "Unique ID"
          },
          "layout_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Layout ID"
          },
          "schema_version": {
            "type": "string",
            "description": "Version of the schema",
            "example": "v0.2"
          },
          "widget_type": {
            "$ref": "#/components/schemas/WidgetType",
            "description": "Type of the widget"
          },
          "data_source": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "Data Source JSON"
          },
          "data_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "Data Config JSON"
          },
          "appearance_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "Appearance Config JSON"
          },
          "data": {
            "type": "object",
            "description": "The actual data for the widget"
          }
        },
        "required": [
          "id",
          "layout_id",
          "schema_version",
          "widget_type"
        ],
        "x-stoplight": {
          "id": "q8cxkpronjmyx"
        }
      },
      "Layout": {
        "description": "Model for Layout",
        "title": "Layout Model",
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "Unique ID"
          },
          "base_id": {
            "description": "Unique Base ID",
            "type": "string"
          },
          "project_id": {
            "description": "Unique Project ID",
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "Layout Title",
            "example": "My Layout"
          },
          "grid_padding_horizontal": {
            "type": "string",
            "description": "Layout Grid's horizontal padding",
            "example": "20px"
          },
          "grid_padding_vertical": {
            "type": "string",
            "description": "Layout Grid's vertical padding",
            "example": "20px"
          },
          "grid_gap": {
            "type": "string",
            "description": "Layout Grid's gap",
            "example": "20px"
          },
          "order": {
            "description": "The order of this Layout in the list of Layouts",
            "type": "number"
          }
        },
        "x-stoplight": {
          "id": "q8cxkpronjmyx"
        }
      },
      "LayoutReq": {
        "description": "Model for Layout request",
        "x-stoplight": {
          "id": "4zlzrppfjxrqb"
        },
        "title": "Layout Request Model",
        "type": "object",
        "properties": {
          "base_id": {
            "description": "Unique Base ID",
            "type": "string"
          },
          "project_id": {
            "description": "Unique Project ID",
            "type": "string"
          },
          "title": {
            "type": "string",
            "description": "Layout Title",
            "example": "My Layout"
          },
          "order": {
            "description": "The order of this Layout in the list of Layouts",
            "type": "number"
          }
        },
        "required": [
          "project_id",
          "title"
        ]
      },
      "WidgetReq": {
        "description": "Model for Widget request",
        "x-stoplight": {
          "id": "4zlzrppfjxrqb"
        },
        "title": "Widget Request Model",
        "type": "object",
        "properties": {
          "layout_id": {
            "description": "Unique Layout ID",
            "type": "string"
          },
          "schema_version": {
            "type": "string",
            "description": "Version of the schema",
            "example": "v0.2"
          },
          "widget_type": {
            "$ref": "#/components/schemas/WidgetType",
            "description": "Type of the widget"
          },
          "data_source": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "Data Source JSON"
          },
          "data_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "Data Config JSON"
          },
          "appearance_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "Appearance Config JSON"
          }
        },
        "required": [
          "layout_id",
          "schema_version",
          "widget_type"
        ]
      },
      "WidgetUpdateReq": {
        "description": "Model for Widget Update request",
        "x-stoplight": {
          "id": "4zlzrppfjxrqb"
        },
        "title": "Widget Update Request Model",
        "type": "object",
        "properties": {
          "schema_version": {
            "type": "string",
            "description": "Version of the schema",
            "example": "v0.2"
          },
          "widget_type": {
            "$ref": "#/components/schemas/WidgetType",
            "description": "Type of the widget"
          },
          "data_source": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "Data Source JSON"
          },
          "data_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "Data Config JSON"
          },
          "appearance_config": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "object"
              },
              {
                "type": "string"
              }
            ],
            "description": "Appearance Config JSON"
          }
        }
      },
      "LayoutUpdateReq": {
        "description": "Model for Layout Update request",
        "x-stoplight": {
          "id": "4zlzrppfjxrqb"
        },
        "title": "Layout Update Request Model",
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Layout Title",
            "example": "My Layout"
          },
          "order": {
            "description": "The order of this Layout in the list of Layouts",
            "type": "number"
          }
        }
      },
      "WidgetType": {
        "description": "Type of the Widget",
        "enum": [
          "number",
          "static_text",
          "line_chart",
          "bar_chart",
          "pie_chart",
          "scatter_plot",
          "button",
          "image",
          "divider"
        ],
        "type": "string"
      },
      "WidgetList": {
        "description": "Model for Widget List",
        "title": "Widget List Model",
        "type": "object",
        "properties": {
          "list": {
            "minItems": 1,
            "type": "array",
            "uniqueItems": true,
            "description": "Widget objects",
            "items": {
              "$ref": "#/components/schemas/Widget"
            }
          }
        },
        "required": [
          "list",
          "pageInfo"
        ],
        "x-stoplight": {
          "id": "2tsq8h6hjctju"
        }
      },
      "LayoutList": {
        "description": "Model for Layout List",
        "title": "Layout List Model",
        "type": "object",
        "properties": {
          "list": {
            "minItems": 1,
            "type": "array",
            "uniqueItems": true,
            "description": "Layout objects",
            "items": {
              "$ref": "#/components/schemas/Layout"
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated"
          }
        },
        "required": [
          "list",
          "pageInfo"
        ],
        "x-stoplight": {
          "id": "2tsq8h6hjctju"
        }
      },
      "Map": {
        "description": "Model for Map",
        "examples": [
          {
            "base_id": "ds_g4ccx6e77h1dmi",
            "columns": [
              {
                "base_id": "ds_g4ccx6e77h1dmi",
                "fk_column_id": "cl_8iw2o4ejzvdyna",
                "fk_view_id": "vw_qjt7klod1p9kyv",
                "id": "nc_46xcacqn4rc9xf",
                "order": 1,
                "project_id": "p_xm3thidrblw4n7",
                "show": 1
              }
            ],
            "fk_geo_data_col_id": "cl_8iw2o4ejzvdyna",
            "fk_view_id": "vw_qjt7klod1p9kyv",
            "meta": {},
            "order": 0,
            "project_id": "p_xm3thidrblw4n7",
            "show": true,
            "title": "My Map"
          }
        ],
        "properties": {
          "base_id": {
            "description": "The ID of the base that this view belongs to",
            "example": "ds_g4ccx6e77h1dmi",
            "type": "string"
          },
          "columns": {
            "description": "Columns in this view",
            "items": {
              "$ref": "#/components/schemas/MapColumn"
            },
            "type": "array"
          },
          "fk_geo_data_col_id": {
            "description": "Foreign Key to GeoData Column",
            "example": "cl_8iw2o4ejzvdyna",
            "type": "string"
          },
          "fk_view_id": {
            "description": "Unique ID for Map",
            "example": "vw_qjt7klod1p9kyv",
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta",
            "description": "Meta data for this view"
          },
          "order": {
            "description": "The order of the map list",
            "type": "number"
          },
          "project_id": {
            "description": "The ID of the project that this view belongs to",
            "example": "p_xm3thidrblw4n7",
            "type": "string"
          },
          "show": {
            "description": "To show this Map or not",
            "type": "boolean"
          },
          "title": {
            "description": "Title of Map View",
            "example": "My Map",
            "type": "string"
          }
        },
        "title": "Map Model",
        "type": "object",
        "x-stoplight": {
          "id": "bg6hvpyk90f0p"
        }
      },
      "MapUpdateReq": {
        "description": "Model for Map",
        "x-stoplight": {
          "id": "2me98w8ot1e6o"
        },
        "examples": [
          {
            "fk_geo_data_col_id": "cl_8iw2o4ejzvdyna",
            "meta": null
          }
        ],
        "title": "Map View Update Request Model",
        "type": "object",
        "properties": {
          "fk_geo_data_col_id": {
            "description": "Foreign Key to GeoData Column",
            "example": "cl_8iw2o4ejzvdyna",
            "type": "string"
          },
          "meta": {
            "$ref": "#/components/schemas/Meta",
            "description": "Meta data for this view"
          }
        }
      },
      "MapColumn": {
        "description": "Model for Map Column",
        "examples": [
          {
            "base_id": "ds_g4ccx6e77h1dmi",
            "fk_column_id": "cl_8iw2o4ejzvdyna",
            "fk_view_id": "vw_qjt7klod1p9kyv",
            "id": "nc_46xcacqn4rc9xf",
            "order": 1,
            "project_id": "p_xm3thidrblw4n7",
            "show": 1
          }
        ],
        "properties": {
          "base_id": {
            "description": "The ID of the base that this map column belongs to",
            "example": "ds_g4ccx6e77h1dmi",
            "type": "string"
          },
          "fk_column_id": {
            "description": "Foreign Key to Column",
            "example": "cl_8iw2o4ejzvdyna",
            "type": "string"
          },
          "fk_view_id": {
            "description": "Foreign Key to View",
            "example": "vw_qjt7klod1p9kyv",
            "type": "string"
          },
          "id": {
            "description": "Unique ID of Map Column",
            "example": "nc_46xcacqn4rc9xf",
            "type": "string"
          },
          "order": {
            "description": "the order in the list of map columns",
            "example": 1,
            "type": "number"
          },
          "project_id": {
            "description": "The ID of the project that this map column belongs to",
            "example": "p_xm3thidrblw4n7",
            "type": "string"
          },
          "show": {
            "description": "Whether to show this column or not",
            "example": 1,
            "type": "number"
          }
        },
        "title": "Map Column Model",
        "type": "object",
        "x-stoplight": {
          "id": "01nfqgzhqlqoe"
        }
      },
      "Webhook": {
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "title": "Webhook",
        "type": "object"
      },
      "Workspace": {
        "properties": {
          "created_at": {},
          "deleted": {
            "type": "boolean"
          },
          "deleted_at": {},
          "description": {
            "type": "string"
          },
          "fk_user_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "meta": {},
          "order": {
            "type": "number"
          },
          "title": {
            "type": "string"
          },
          "updated_at": {}
        },
        "title": "Workspace",
        "type": "object"
      },
      "WorkspaceList": {
        "description": "",
        "properties": {
          "list": {
            "items": {
              "$ref": "#/components/schemas/Workspace"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated"
          }
        },
        "type": "object"
      },
      "WorkspaceUser": {
        "description": "",
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          },
          "fk_user_id": {
            "type": "string"
          },
          "invite_accepted": {
            "type": "boolean"
          },
          "invite_token": {
            "type": "string"
          },
          "roles": {
            "type": "string"
          }
        },
        "title": "Workspace User",
        "type": "object",
        "x-internal": false
      },
      "WorkspaceUserInvite": {
        "description": "",
        "properties": {
          "email": {
            "format": "email",
            "type": "string"
          },
          "roles": {
            "type": "string"
          }
        },
        "title": "Workspace User Invite",
        "type": "object",
        "x-internal": false
      },
      "WorkspaceUserList": {
        "description": "",
        "properties": {
          "list": {
            "items": {
              "$ref": "#/components/schemas/WorkspaceUser"
            },
            "type": "array"
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated"
          }
        },
        "type": "object"
      },
      "ProjectInviteEvent": {
        "type": "object",
        "properties": {
          "fk_user_id": {
            "type": "string",
            "description": "The ID of the user who receives the project invite"
          },
          "type": {
            "type": "string",
            "description": "The type of event, which should be set to 'PROJECT_INVITE'"
          },
          "body": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the project being invited to"
              },
              "title": {
                "type": "string",
                "description": "The title of the project being invited to"
              },
              "type": {
                "type": "string",
                "description": "The type of the project being invited to"
              },
              "invited_by": {
                "type": "string",
                "description": "The email address of the user who invited the recipient"
              },
              "workspace_id": {
                "type": "string",
                "description": "The ID of the workspace that the project being invited to belongs to"
              }
            },
            "required": [
              "id",
              "title",
              "type",
              "invited_by",
              "workspace_id"
            ]
          }
        },
        "required": [
          "fk_user_id",
          "type",
          "body"
        ]
      },
      "ProjectEvent": {
        "type": "object",
        "properties": {
          "fk_user_id": {
            "type": "string",
            "description": "The ID of the user"
          },
          "type": {
            "type": "string"
          },
          "body": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the project"
              },
              "title": {
                "type": "string",
                "description": "The title of the project"
              },
              "type": {
                "type": "string",
                "description": "The type of the project"
              },
              "workspace_id": {
                "type": "string",
                "description": "The ID of the workspace that the project belongs to"
              }
            },
            "required": [
              "id",
              "title",
              "type",
              "workspace_id"
            ]
          }
        },
        "required": [
          "fk_user_id",
          "type",
          "body"
        ]
      },
      "WorkspaceInviteEvent": {
        "type": "object",
        "properties": {
          "fk_user_id": {
            "type": "string",
            "description": "The ID of the user who receives the workspace invite"
          },
          "type": {
            "type": "string",
            "description": "The type of event, which should be set to 'WORKSPACE_INVITE'"
          },
          "body": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of the workspace being invited to"
              },
              "invited_by": {
                "type": "string",
                "description": "The email address of the user who invited the recipient"
              },
              "title": {
                "type": "string",
                "description": "The title of the workspace being invited to"
              }
            },
            "required": [
              "id",
              "invited_by",
              "title"
            ]
          }
        },
        "required": [
          "fk_user_id",
          "type",
          "body"
        ]
      },
      "Filter": {
        "description": "Model for Filter",
        "examples": [
          {
            "base_id": "ds_g4ccx6e77h1dmi",
            "comparison_op": "eq",
            "comparison_sub_op": null,
            "created_at": "2023-03-02 18:18:05",
            "fk_column_id": "cl_d7ah9n2qfupgys",
            "fk_hook_id": null,
            "fk_widget_id": null,
            "fk_parent_id": null,
            "fk_view_id": "vw_b739e29vqmrxnf",
            "id": "fi_xn647tpmdq8fu8",
            "is_group": null,
            "logical_op": "and",
            "order": 1,
            "project_id": "p_xm3thidrblw4n7",
            "updated_at": "2023-03-02 18:18:05",
            "value": "foo"
          }
        ],
        "properties": {
          "base_id": {
            "description": "Unqiue Base ID",
            "readOnly": true,
            "type": "string"
          },
          "children": {
            "description": "Children filters. Available when the filter is grouped.",
            "items": {
              "$ref": "#/components/schemas/Filter"
            },
            "type": "array"
          },
          "comparison_op": {
            "description": "Comparison Operator",
            "anyOf": [
              {
                "enum": [
                  "allof",
                  "anyof",
                  "blank",
                  "btw",
                  "checked",
                  "empty",
                  "eq",
                  "ge",
                  "gt",
                  "gte",
                  "in",
                  "is",
                  "isWithin",
                  "isnot",
                  "le",
                  "like",
                  "lt",
                  "lte",
                  "nallof",
                  "nanyof",
                  "nbtw",
                  "neq",
                  "nlike",
                  "not",
                  "notblank",
                  "notchecked",
                  "notempty",
                  "notnull",
                  "null"
                ],
                "type": "string"
              },
              {
                "type": "null"
              }
            ]
          },
          "comparison_sub_op": {
            "anyOf": [
              {
                "enum": [
                  "daysAgo",
                  "daysFromNow",
                  "exactDate",
                  "nextMonth",
                  "nextNumberOfDays",
                  "nextWeek",
                  "nextYear",
                  "oneMonthAgo",
                  "oneMonthFromNow",
                  "oneWeekAgo",
                  "oneWeekFromNow",
                  "pastMonth",
                  "pastNumberOfDays",
                  "pastWeek",
                  "pastYear",
                  "today",
                  "tomorrow",
                  "yesterday"
                ],
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "description": "Comparison Sub-Operator"
          },
          "fk_column_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Foreign Key to Column"
          },
          "fk_hook_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Foreign Key to Hook"
          },
          "fk_widget_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Foreign Key to Widget"
          },
          "fk_model_id": {
            "$ref": "#/components/schemas/Id",
            "description": "Foreign Key to Model"
          },
          "fk_parent_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Foreign Key to parent group."
          },
          "fk_view_id": {
            "$ref": "#/components/schemas/StringOrNull",
            "description": "Foreign Key to View"
          },
          "id": {
            "$ref": "#/components/schemas/Id",
            "description": "Unique ID"
          },
          "is_group": {
            "description": "Is this filter grouped?",
            "oneOf": [
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ]
          },
          "logical_op": {
            "description": "Logical Operator",
            "enum": [
              "and",
              "not",
              "or"
            ],
            "type": "string"
          },
          "project_id": {
            "description": "Unique Project ID",
            "readOnly": true,
            "type": "string"
          },
          "value": {
            "description": "The filter value. Can be NULL for some operators."
          }
        },
        "readOnly": true,
        "title": "Filter Model",
        "type": "object",
        "x-stoplight": {
          "id": "txz3lsqh1rbsu"
        }
      },
      "FilterList": {
        "description": "Model for Filter List",
        "examples": [
          {
            "list": [
              {
                "base_id": "ds_g4ccx6e77h1dmi",
                "comparison_op": "eq",
                "comparison_sub_op": null,
                "created_at": "2023-03-02 18:18:05",
                "fk_column_id": "cl_d7ah9n2qfupgys",
                "fk_hook_id": null,
                "fk_widget_id": null,
                "fk_parent_id": null,
                "fk_view_id": "vw_b739e29vqmrxnf",
                "id": "fi_xn647tpmdq8fu8",
                "is_group": null,
                "logical_op": "and",
                "order": 1,
                "project_id": "p_xm3thidrblw4n7",
                "updated_at": "2023-03-02 18:18:05",
                "value": "foo"
              }
            ],
            "pageInfo": {
              "isFirstPage": true,
              "isLastPage": true,
              "page": 1,
              "pageSize": 10,
              "totalRows": 1
            }
          }
        ],
        "title": "Filter List Model",
        "type": "object",
        "x-examples": {
          "example-1": {
            "bases": {
              "list": [
                {
                  "alias": "string",
                  "database": "string",
                  "host": "string",
                  "id": "string",
                  "params": "string",
                  "password": "string",
                  "port": 0,
                  "project_id": "string",
                  "ssl": "string",
                  "type": "string",
                  "url": "string",
                  "username": "string"
                }
              ],
              "pageInfo": {
                "isFirstPage": true,
                "isLastPage": true,
                "pageSize": 0,
                "sort": "string",
                "totalRows": 0
              }
            }
          }
        },
        "properties": {
          "list": {
            "type": "array",
            "x-stoplight": {
              "id": "22sgv37ve9kxo"
            },
            "description": "List of filter objects",
            "items": {
              "$ref": "#/components/schemas/Filter",
              "x-stoplight": {
                "id": "ttw5rxhy83k8p"
              }
            }
          },
          "pageInfo": {
            "$ref": "#/components/schemas/Paginated",
            "x-stoplight": {
              "id": "7cyrb1770mrzz"
            }
          }
        },
        "required": [
          "list",
          "pageInfo"
        ],
        "x-stoplight": {
          "id": "wbc42cyev1qzt"
        }
      }
    },
    "responses": {
      "LayoutList": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/LayoutList"
            }
          }
        }
      },
      "WidgetList": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/WidgetList"
            }
          }
        }
      }
    }
  }
}
